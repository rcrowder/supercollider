{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf330
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;\red0\green115\blue0;\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs18 \cf2 \
\cf3 // S\'e9minaire Musical Final 2007\cf2 \
\cf3 // julian rohrhuber\cf2 \
\cf3 // renate wieser\cf2 \
\
(\
\cf4 var\cf2  dec, v_spiel, v_klang, v_neu, v_play, v_guess, v_display, v_sargam;\
\cf4 var\cf2  f_setButtons, f_neu, f_play, f_guess, f_playSargam, f_freeSargam;\
\cf4 var\cf2  spiel=\cf5 "sm_sine"\cf2 , freqs, index;\
\cf4 var\cf2  intervalle, freq0, note0, rates, nameList, amp=0.5, sargamSynth;\
\
\cf4 var\cf2  mode=\cf6 \\european\cf2 , allowBase=\cf4 true\cf2 ;\
\cf4 var\cf2  eurNotes, indNotes, chords, chordKeys;\
\
eurNotes = #[\cf5 "C"\cf2 , \cf5 "C#"\cf2 , \cf5 "D"\cf2 , \cf5 "D#"\cf2 , \cf5 "E"\cf2 , \cf5 "F"\cf2 , \cf5 "F#"\cf2 , \cf5 "G"\cf2 , \cf5 "G#"\cf2 , \cf5 "A"\cf2 , \cf5 "Bb"\cf2 , \cf5 "B"\cf2 , \cf5 "C'"\cf2 ];\
indNotes = #[\cf5 "Sa"\cf2 , \cf5 "re"\cf2 , \cf5 "Re"\cf2 , \cf5 "ga"\cf2 , \cf5 "Ga"\cf2 , \cf5 "Ma"\cf2 , \cf5 "ma"\cf2 , \cf5 "Pa"\cf2 , \cf5 "dha"\cf2 , \cf5 "Dha"\cf2 , \cf5 "ni"\cf2 , \cf5 "Ni"\cf2 , \cf5 "Sa'"\cf2 ];\
\
\
chords = \cf4 IdentityDictionary\cf2 [\
	\cf6 'major'\cf2  -> #[0, 2, 4],\
	\cf6 'minor'\cf2  -> #[0, 2b, 4],\
	\cf6 '7th'\cf2  -> #[0, 2, 4, 6b],\
	\cf6 'minor7'\cf2  -> #[0, 2b, 4, 6b],\
	\cf6 'sixth'\cf2  -> #[0, 2, 4, 5],\
	\cf6 'minor6'\cf2  -> #[0, 2b, 4, 5],\
	\cf6 'aug'\cf2  -> #[0, 2, 4s],\
	\cf6 'aug7'\cf2  -> #[0, 2, 4s, 6b],\
	\cf6 'dim'\cf2  -> #[0, 2b, 4b],\
	\cf6 'dim7'\cf2  -> #[0, 2b, 4b, 6bb],\
	\cf6 '7th 5b'\cf2  -> #[0, 2, 4b, 6b],\
	\cf6 'min7 5b'\cf2  -> #[0, 2b, 4, 6b],\
	\cf6 'ninth'\cf2  -> #[0, 2, 4, 6b, 8],\
	\cf6 'minor9'\cf2  -> #[0, 2b, 4, 6b, 8],\
	\cf6 'major9'\cf2  -> #[0, 2, 4, 6, 8], \
	\cf6 '11th'\cf2  -> #[0, 2, 4, 6b, 8, 10],\
	\cf6 'dim9'\cf2  -> #[0, 2, 5, 8],\
	\cf6 'added9'\cf2  -> #[0, 2, 4, 8],\
	\cf6 'added4'\cf2  -> #[0, 2, 4, 10],\
	\cf6 'sus'\cf2  -> #[0, 3, 4],\
	\cf6 'sus9'\cf2  -> #[0, 1, 4],\
	\cf6 '7 sus4'\cf2  -> #[0, 3, 4, 6b],\
	\cf6 '7 sus9'\cf2  -> #[0, 1, 4, 6b],\
	\cf6 'fifth'\cf2  -> #[0, 4]\
];\
chordKeys = chords.keys.asArray;\
\
\cf3 // GUI\cf2 \
\
w = \cf4 GUI\cf2 .window.new(\cf5 "seminaire_musical"\cf2 , \cf4 Rect\cf2 (10, 250, 750, 250), false);\
\
w.view.decorator = dec = \cf4 FlowLayout\cf2 (w.view.bounds);\
dec.shift(20, 20);\
v_spiel = \cf4 GUI\cf2 .listView.new(w, \cf4 Rect\cf2 (0,0, 100, 130))\
	\cf3 /*.items_(\
		["noten", "frequenzen", "noten + oktave","intervalle","times","beatings", "akkorde"]\
	);*/\cf2 \
	.items_(\
		[\cf5 "notes"\cf2 , \cf5 "frequencies"\cf2 , \cf5 "notes + octaves"\cf2 ,\cf5 "intervals"\cf2 ,\cf5 "times"\cf2 ,\cf5 "beatings"\cf2 , \cf5 "chords"\cf2 ]\
	);\
dec.shift(5);\
v_klang = \cf4 GUI\cf2 .listView.new(w, \cf4 Rect\cf2 (0,0, 100, 120)).items_([\cf5 "sinus"\cf2 , \cf5 "noise"\cf2 , \cf5 "pulse"\cf2 , \cf5 "bell"\cf2 , \cf5 "piano"\cf2 , \cf5 "timbre"\cf2 ]);\
dec.shift(20);\
v_neu = \cf4 GUI\cf2 .button.new(w, \cf4 Rect\cf2 (0,0, 70, 35)).states_([[\cf5 "next try"\cf2 , \cf4 Color\cf2 .black, \cf4 Color\cf2 .clear]]);\
v_play = \cf4 GUI\cf2 .button.new(w, \cf4 Rect\cf2 (0,0, 50, 35)).states_([[\cf5 "play"\cf2 , \cf4 Color\cf2 .black, \cf4 Color\cf2 .clear]]);\
\cf4 SCSlider\cf2 (w, \cf4 Rect\cf2 (0,0, 200, 35)).value_(0.5).action_(\{ \cf4 |v|\cf2  amp = v.value \});\
\cf4 GUI\cf2 .button.new(w, \cf4 Rect\cf2 (0,0, 90, 18))\
	.states_([[\cf5 "boot server"\cf2 , \cf4 Color\cf2 .black, \cf4 Color\cf2 .clear]]).action_(\{ \cf4 Server\cf2 .default.boot \});\
\
dec.shift(-425, 50);\
\
\cf4 GUI\cf2 .button.new(w, \cf4 Rect\cf2 (0,0, 70,20))\
	.states_([[\cf5 "europe"\cf2 ,\cf5 "india"\cf2 ,\cf5 "numerical"\cf2 ], \cf4 Color\cf2 .black, \cf4 Color\cf2 .clear].flop)\
	.action_(\{ \cf4 |v|\cf2  mode = [\cf6 \\european\cf2 , \cf6 \\indian\cf2 , \cf6 \\numerical\cf2 ][v.value.asInteger]; f_neu.value; \});\
\
v_sargam = \cf4 GUI\cf2 .button.new(w, \cf4 Rect\cf2 (0,0, 50, 20))\
	.states_([[\cf5 "sargam"\cf2 , \cf4 Color\cf2 .black, \cf4 Color\cf2 .clear], [\cf5 "sargam"\cf2 , \cf4 Color\cf2 .red, \cf4 Color\cf2 .clear]]);\
 \
\cf4 GUI\cf2 .button.new(w, \cf4 Rect\cf2 (0,0, 180, 20))\
	.states_([[\cf5 "including low tones"\cf2 , \cf4 Color\cf2 .black, \cf4 Color\cf2 .clear],[\cf5 "\cf7 excluding low tones\cf5 "\cf2 , \cf4 Color\cf2 .black, \cf4 Color\cf2 .clear]])\
	.action_(\{ \cf4 |v|\cf2 \
		allowBase = v.value < 1;\
	\});\
	\
v_display = \cf4 GUI\cf2 .staticText.new(w, \cf4 Rect\cf2 (0,0,80,20)); \cf3 //.font_(Font("Helvetica", 18));\cf2 \
dec.shift(300, -80);\
\
\
\
dec.nextLine;\
dec.shift(20);\
\
dec.nextLine;	\
dec.shift(20, 30);\
\
\cf4 GUI\cf2 .staticText.new(w, \cf4 Rect\cf2 (0,0, 300,20))\
	.string_(\cf5 "find the corresponding value here:"\cf2 )\
	.\cf0 align_(\\left);\cf2 \
\
dec.nextLine;	\
dec.shift(20, 0);\
\
v_guess = \cf4 Array\cf2 .fill(13, \{\
	\cf4 GUI\cf2 .button.new(w, \cf4 Rect\cf2 (0,0, 50, 35)).font_(\cf4 Font\cf2 (\cf5 "Monaco"\cf2 , 9));\
\
\});\
\
w.front;\
\
\cf3 // funktionen\cf2 \
\
f_setButtons = \{ \cf4 arg\cf2  werte;\
	v_guess.do \{ \cf4 |but, i|\cf2 \
		but.states_([[werte[i].asString, \cf4 Color\cf2 .black, \cf4 Color\cf2 .clear]]);\
		but.refresh;\
	\};\
	\
\
\};\
f_setButtons.(\cf5 ""\cf2  ! 13);\
f_neu = \{\
	\cf4 var\cf2  sargamIsPlaying, minFreq, octaves;\
	sargamIsPlaying = v_sargam.value > 0;\
	if(allowBase) \{ \
		minFreq = 60;\
		octaves = #[0.5, 1, 2, 4];\
	\} \{ \
		minFreq = 200;\
		octaves = #[1, 2, 4];\
	\};\
	\
	index = 13.rand;\
	switch(v_spiel.value,\
	0, \{\
		if(mode == \cf6 \\indian\cf2 ) \{\
			\
			freqs = #[240, 256, 270, 288, 300, 320, 337.5, 360, 384, 400, 432, 450, 480];\
			\cf3 // see: http://www.soundofindia.com/showarticle.asp?in_article_id=-446619640\cf2 \
			nameList = indNotes; \
		\} \{\
			freqs = ((0..12) + 60).midicps; \
			if(mode == \cf6 \\numerical\cf2 ) \{ nameList = (0..12) \} \{\'a0nameList = eurNotes \};\
		\};\
		freq0 = freqs[0];\
		\
	\},\
	1, \{\
		nameList = \{\'a0exprand(minFreq, 15000).round(1) \} ! 13;\
		freqs = nameList;\
		freq0 = 440;\
	\},\
	2, \{\
		if(mode == \cf6 \\indian\cf2 ) \{\
			freqs = #[240, 256, 270, 288, 300, 320, 337.5, 360, 384, 400, 432, 450, 480];\
			nameList = indNotes;\
		\} \{ \
			freqs = ((0..12) + 60).midicps; \
			if(mode == \cf6 \\numerical\cf2 ) \{ nameList = (0..12) \} \{ nameList = eurNotes \};\
		\};\
		freq0 = freqs[0];\
		freqs = freqs * (\{ octaves.choose \} ! 12);\
		\
		\
	\},\
	3, \{\
		if(mode == \cf6 \\european\cf2 ) \{\
			freq0 = ((0..12).choose + 60).midicps * octaves.choose;\
			intervalle = (1..12).midiratio.insert(9, 7/4); \cf3 // insert 7/4\cf2 \
			freqs = freq0 * intervalle;\
			nameList = \
		#[\cf5 "-sekund"\cf2 , \cf5 "+sekund"\cf2 , \cf5 "-terz"\cf2 , \cf5 "+terz"\cf2 , \cf5 "quart"\cf2 , \cf5 "tritone"\cf2 , \cf5 "quint"\cf2 , \
			\cf5 "-sext"\cf2 , \cf5 "+sext"\cf2 , \cf5 "7/4"\cf2 , \cf5 "-sept"\cf2 , \cf5 "sept"\cf2 , \cf5 "oktav"\cf2 \
		];\
		\} \{\
			freq0 =  #[240, 256, 270, 288, 300, 320, 337.5, 360, 384, 400, 432, 450].choose;\
			freq0 = freq0 * octaves.choose;\
			intervalle = [16/15, 9/8, 6/5, 5/4, 4/3, 17/12, 3/2, 8/5, 5/3, 7/4, 16/9, 15/8, 2/1];\
			freqs = freq0 * intervalle;\
			nameList = \
		#[\cf5 "16/15"\cf2 , \cf5 "9/8"\cf2 , \cf5 "6/5"\cf2 , \cf5 "5/4"\cf2 , \cf5 "4/3"\cf2 , \cf5 "17/12"\cf2 , \cf5 "3/2"\cf2 , \cf5 "8/5"\cf2 , \cf5 "5/3"\cf2 , \cf5 "7/4"\cf2 ,\
			\cf5 "16/9"\cf2 , \cf5 "15/8"\cf2 , \cf5 "2/1"\cf2 ];\
		\};\
	\},\
	4, \{\
		freq0 = rrand(1600, 8000);\
		freqs = freq0 ! 13;\
		rates = \{ exprand(0.9, 19) \} ! 13;\
		nameList = rates.round(0.01);\
		\
	\},\
	5, \{\
		freq0 = ((0..11).choose + 60).midicps * octaves.choose;\
		freqs = freq0 ! 13;\
		rates = \{ exprand(0.9, 40) \} ! 13;\
		nameList = rates.round(0.01);\
		\
	\},\
	6, \{\
		note0 = (0..11).choose + #[-12, 0].choose;\
		freq0 = (note0 + 60).midicps;\
		freqs = freq0 ! 13;\
		nameList = chordKeys[ (0..chordKeys.size-1).scramble.keep(13)].sort;\
	\
	\});\
	f_setButtons.(nameList);\
	f_freeSargam.value;\
	if(sargamIsPlaying) \{ f_playSargam.value \};\
\};\
\
f_neu.value; \cf3 // init\cf2 \
\
f_play = \{ \cf4 |i|\cf2 \
	switch(v_spiel.value,\
	3, \{ \cf3 // intervall\cf2 \
			fork \{\
				\cf4 Synth\cf2 (spiel, [\cf6 \\freq\cf2 , freq0, \cf6 \\amp\cf2 , amp]);\
				0.4.wait;\
				\cf4 Synth\cf2 (spiel, [\cf6 \\freq\cf2 , freq0 * intervalle[i], \cf6 \\amp\cf2 , amp]);\
			\}\
		\},\
	4, \{ \cf3 // rates\cf2 \
			\cf4 Synth\cf2 (\cf5 "sm_click"\cf2 , [\cf6 \\freq\cf2 , freq0, \cf6 \\rate\cf2 , rates[i], \cf6 \\amp\cf2 , amp])\
		\},\
	5, \{ \cf3 // beatings\cf2 \
			if(spiel.postln == \cf5 "sm_string"\cf2 ) \{\
				\cf4 Synth\cf2 (\cf5 "sm_string"\cf2 , [\cf6 \\freq\cf2 , freq0,  \cf6 \\amp\cf2 , amp]);\
				\cf4 Synth\cf2 (\cf5 "sm_string"\cf2 , [\cf6 \\freq\cf2 , freq0 + rates[i], \cf6 \\amp\cf2 , amp])\
			\} \{\
				\cf4 Synth\cf2 (\cf5 "sm_beatings"\cf2 , [\cf6 \\freq\cf2 , freq0, \cf6 \\rate\cf2 , rates[i], \cf6 \\amp\cf2 , amp])\
			\}\
		\},\
	6, \{ \cf3 // akkorde\cf2 \
		fork \{\
			\cf4 var\cf2  strum = [0, 0.04].choose.rand;\
			\cf4 var\cf2  notes = chords[nameList[i]].degreeToKey(#[0, 2, 4, 5, 7, 9, 11]) + note0;\
			notes.do \{ \cf4 |val|\cf2 \
				\cf4 Synth\cf2 (spiel, [\cf6 \\freq\cf2 , (val + 60).midicps, \cf6 \\amp\cf2 , amp * 0.5]);\
				strum.wait;\
			\}\
		\}\
	\
	\},\
		\{\
			\cf4 Synth\cf2 (spiel, [\cf6 \\freq\cf2 , freqs[i], \cf6 \\amp\cf2 , amp])\
		\}\
	)\
	\
\
\};\
f_playSargam = \{\'a0v_sargam.valueAction = 1 \};\
f_freeSargam = \{\'a0v_sargam.valueAction = 0 \};\
\
\cf3 // funktionen zu buttons\cf2 \
v_neu.action = f_neu;\
v_play.action = \{ f_play.value(index) \};\
v_spiel.action = f_neu;\
v_guess.do \{\cf4 |but, i|\cf2 \
	but.action = \{ \
		if(index == i) \{\
			but.states = [[but.states[0][0], \cf4 Color\cf2 .red, \cf4 Color\cf2 .yellow]];\
		\};\
		f_play.value(i);\
		v_display.string = \cf5 "note:"\cf2  + (freqs[i].cpsmidi - 60).round(0.1);\
	\};\
\};\
v_klang.action = \{\cf4 |view|\cf2  \
	spiel = \
[\cf5 "sm_sine"\cf2 , \cf5 "sm_noise"\cf2 , \cf5 "sm_pulse"\cf2 , \cf5 "sm_bell"\cf2 , \cf5 "sm_string"\cf2 , \cf5 "sm_timbremix"\cf2 ][view.value.asInteger]\
\};\
v_sargam.action = \{ \cf4 |view|\cf2  \
	if(view.value == 0) \
		\{ sargamSynth.release \} \{ sargamSynth = \cf4 Synth\cf2 (\cf6 \\sm_sargam\cf2 , [\cf6 \\freq\cf2 , freq0, \cf6 \\amp\cf2 , amp]) \
	\};\
\};\
\
w.view.keyDownAction = \{ \cf4 arg\cf2  view, char;\
	f_play.value(char.ascii - 48 % 13);\
\};\
\
w.onClose = \{ f_freeSargam.value \};\
\
\cf3 // synthdefs\cf2 \
\
\cf4 SynthDef\cf2 (\cf5 "sm_sine"\cf2 , \{ \cf4 arg\cf2  freq=440, amp=0.5;\
	amp = \cf4 AmpComp\cf2 .kr(freq) * amp;\
	\cf4 Out\cf2 .ar(0,\
		\cf4 Pan2\cf2 .ar(\
			\cf4 SinOsc\cf2 .ar(freq) * \cf4 EnvGen\cf2 .kr(\cf4 Env\cf2 .perc(0.03, \cf4 Rand\cf2 (0.3, 2), amp), doneAction:2),\
			\cf4 Rand\cf2 (-0.5, 0.5)\
		)\
	)\
\
\}).store;\
\
\cf4 SynthDef\cf2 (\cf5 "sm_noise"\cf2 , \{ \cf4 arg\cf2  freq=440, amp=0.5;\
	\cf4 var\cf2  u;\
	amp = \cf4 AmpComp\cf2 .kr(freq) * amp;\
	u = \cf4 BPF\cf2 .ar(\cf4 PinkNoise\cf2 .ar(20), freq, \cf4 Rand\cf2 (0.1, 0.005));\
	\cf4 Out\cf2 .ar(0,\
		\cf4 Pan2\cf2 .ar(\
			u * \cf4 EnvGen\cf2 .kr(\
				\cf4 Env\cf2 .linen(\cf4 Rand\cf2 (0.03, 0.2), \cf4 Rand\cf2 (0.3, 2), \cf4 Rand\cf2 (0.3, 0.8), amp), \
				doneAction:2\
			),\
			\cf4 Rand\cf2 (-0.5, 0.5)\
		)\
	)\
\
\}).store;\
\
\cf4 SynthDef\cf2 (\cf5 "sm_pulse"\cf2 , \{ \cf4 arg\cf2  freq=440, amp=0.5;\
	\cf4 var\cf2  u;\
	amp = \cf4 AmpComp\cf2 .kr(freq) * amp;\
	u = \cf4 Pulse\cf2 .ar(freq, \cf4 Rand\cf2 (0.3, 0.5), 0.3);\
	\cf4 Out\cf2 .ar(0,\
		\cf4 Pan2\cf2 .ar(\
			u * \cf4 EnvGen\cf2 .kr(\cf4 Env\cf2 .perc(0.03, \cf4 Rand\cf2 (0.3, 2), amp), doneAction:2),\
			\cf4 Rand\cf2 (-0.5, 0.5)\
		)\
	)\
\
\}).store;\
\
\cf4 SynthDef\cf2 (\cf5 "sm_bell"\cf2 , \{ \cf4 arg\cf2  freq=440, amp=0.5;\
	n = 5;\
	amp = \cf4 AmpComp\cf2 .kr(freq) * amp;\
	\cf4 Out\cf2 .ar(0,\
		\cf4 Pan2\cf2 .ar(\
			\cf4 Klang\cf2 .ar(`[\
				[1] ++ (\{ rrand(1.2, 5.8) \} ! (n-1)), \
				[1] ++ (\{ rrand(0.1, 0.3) \} ! (n-1)).sort.reverse,\
			\{ pi.rand \} ! n\
			], freq)\
			 * \cf4 EnvGen\cf2 .kr(\cf4 Env\cf2 .perc(0.03, \cf4 Rand\cf2 (0.3, 2), amp * 0.5), doneAction:2),\
		\cf4 Rand\cf2 (-0.5, 0.5)\
		)\
	)\
\
\}).store;\
\
(\
\cf4 SynthDef\cf2 (\cf5 "sm_string"\cf2 , \{ \cf4 arg\cf2  freq=440, amp=0.5;\
	\cf4 var\cf2  u, exc, sustain;\
	amp = \cf4 AmpComp\cf2 .kr(freq) * amp;\
	exc = \cf4 LFNoise2\cf2 .ar(3000, \cf4 Decay2\cf2 .ar(\cf4 Impulse\cf2 .ar(0.0001, 0, 0.5), 0.006, 0.02));\
	sustain = \cf4 Rand\cf2 (1, 1.5);\
	u = \cf4 LPF\cf2 .ar(\
		\cf4 CombN\cf2 .ar(exc, 0.04, (freq * (1+[0, 0.001])).reciprocal, sustain).sum,\
		min(20000, freq * \cf4 Rand\cf2 (3, 2.3) ! 2)\
	).sum;\
	\
	\cf3 //DetectSilence.ar(u, doneAction:2);\cf2 \
	amp = amp * \cf4 EnvGen\cf2 .kr(\cf4 Env\cf2 .linen(0, sustain, 0.1), doneAction:2);\
	\cf4 Out\cf2 .ar(0,\
		\cf4 Pan2\cf2 .ar(u * amp, freq.cpsmidi % 12 / 6 - 1)\
	);\
\
\}).store;\
);\
\
\cf4 SynthDef\cf2 (\cf5 "sm_click"\cf2 , \{ \cf4 arg\cf2  freq=440, rate=1, amp=0.5;\
	\cf4 var\cf2  u;\
	amp = \cf4 AmpComp\cf2 .kr(freq) * amp;\
	u = \cf4 SinOsc\cf2 .ar(freq) * \cf4 Decay\cf2 .kr(\cf4 Impulse\cf2 .kr(rate, 0, 40), 0.002, 0.04);\
	\cf4 Out\cf2 .ar(0,\
		\cf4 Pan2\cf2 .ar(\
			u * \cf4 EnvGen\cf2 .kr(\cf4 Env\cf2 .linen(0, min(2, \cf4 IRand\cf2 (4, 8) / rate), 0.1, amp), doneAction:2),\
			\cf4 Rand\cf2 (-0.5, 0.5)\
		)\
	)\
\
\}).store;\
\
\cf4 SynthDef\cf2 (\cf5 "sm_beatings"\cf2 , \{ \cf4 arg\cf2  freq=440, rate=1, amp=0.5;\
	\cf4 var\cf2  u;\
	amp = \cf4 AmpComp\cf2 .kr(freq) * amp;\
	u = \cf4 SinOsc\cf2 .ar([0, rate] + freq).sum * 0.3;\
	\cf4 Out\cf2 .ar(0,\
		\cf4 Pan2\cf2 .ar(\
			u * \cf4 EnvGen\cf2 .kr(\cf4 Env\cf2 .linen(0.01, max(\cf4 Rand\cf2 (0.3, 2),  3 / rate), 0.5, amp), doneAction:2),\
			\cf4 Rand\cf2 (-0.5, 0.5)\
		)\
	)\
\
\}).store;\
\
\cf4 SynthDef\cf2 (\cf5 "sm_sargam"\cf2 , \{ \cf4 arg\cf2  freq=440, amp=0.5, gate=1.0;\
	\cf4 var\cf2  u;\
	amp = \cf4 AmpComp\cf2 .kr(freq) * amp * 0.5;\
	u = \cf4 Pulse\cf2 .ar(freq * [0.5, 1] +.t [\cf4 Rand\cf2 (0.2, 0.5), \cf4 Rand\cf2 (0.2, 0.5).neg], \
		\cf4 LFNoise1\cf2 .kr(0.11, 0.05, 0.4), 0.15).sum;\
	u = \cf4 RLPF\cf2 .ar(u, \cf4 LFNoise2\cf2 .kr(0.3, 0.2, 1) * 5000, 0.5);\
	\cf4 Out\cf2 .ar(0,\
			u * \cf4 EnvGen\cf2 .kr(\cf4 Env\cf2 .asr(1.0, amp, 1.0), gate, doneAction:2)\
	)\
\
\}).store;\
\
\cf4 SynthDef\cf2 (\cf5 "sm_timbremix"\cf2 , \{ \cf4 arg\cf2  freq=440, amp=0.5;\
	\cf4 var\cf2  n = 10, u;\
	freq = freq * ([1.0] ++ \{ \cf4 ExpRand\cf2 (1.0, 3.0) \}.dup(18));\
	amp = amp * 0.4 * (\cf4 AmpComp\cf2 .ir(freq) * ([1.0] ++ (1..n).reciprocal));\
	\cf4 Out\cf2 .ar(0,\
		\cf4 Pan2\cf2 .ar(\
			u = sum(\
				\cf4 SinOsc\cf2 .ar(freq, 0, amp)\
			) * \cf4 EnvGen\cf2 .kr(\cf4 Env\cf2 .perc(0.03, \cf4 Rand\cf2 (0.3, 2))),\
			\
			\cf4 Rand\cf2 (-0.5, 0.5)\
		)\
	);\
	\cf4 DetectSilence\cf2 .ar(u, doneAction:2);\
\
\}).store;\
\
)\
}