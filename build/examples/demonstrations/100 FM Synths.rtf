{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf440
{\fonttbl\f0\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue191;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs24 \cf0 \
// James McCartney\
\
\
s.boot;\
\
(\
\cf2 // define a simple reverb.\cf0 \
\cf3 SynthDef\cf0 (\cf4 "reverb"\cf0 , \{\
	\cf3 var\cf0  in;\
	in = \cf3 In\cf0 .ar(0, 2);\
	5.do(\{ in = \cf3 AllpassN\cf0 .ar(in, 0.05, [0.05.rand, 0.05.rand], 2); \});\
	\cf3 ReplaceOut\cf0 .ar(0, in);\
\}).load(s);\
)\
\
\
(\
\cf2 // define 100 randomly generated percussive FM instruments.\cf0 \
\cf2 // this will take a few seconds.\cf0 \
\cf2 // this code can be modified to generate sustaining instruments.\cf0 \
\cf3 var\cf0  carrierF, middleF, modulatorF;\
\cf3 var\cf0  maxAttack = 0.4;\
\
carrierF = \{ \cf3 arg\cf0  freq=440, mod=0, mix=0, gate=1;\
	\cf3 var\cf0  e, m;\
	\cf2 //e = Env.adsr(exprand(0.001,maxAttack), linrand(3.0), \cf0 rrand(0.4,1.0).squared, rrand(0.001,0.2));\
	e = \cf3 Env\cf0 .perc(exprand(0.001,maxAttack), exprand(0.1,2.0));\
	m = linrand(10) + 1;\
	e = \cf3 EnvGen\cf0 .kr(e, gate,  rrand(0.5,0.6).rand.squared);\
	\cf3 SinOsc\cf0 .ar(freq * m, mod, e, mix);\
\};\
\
middleF = \{ \cf3 arg\cf0  freq=440, mod=0, mix=0, gate=1;\
	\cf3 var\cf0  e, m;\
	\cf2 //e = Env.adsr(exprand(0.001,maxAttack), linrand(3.0), \cf0 1.0.rand.squared, rrand(0.001,0.2));\
	e = \cf3 Env\cf0 .perc(exprand(0.001,maxAttack), exprand(0.1,2.0));\
	m = linrand(5) + 1;\
	e = \cf3 EnvGen\cf0 .kr(e, gate,  3.0.rand.squared);\
	\cf3 SinOsc\cf0 .ar(freq * m, mod, e, mix);\
\};\
\
modulatorF = \{ \cf3 arg\cf0  freq=440, mix=0, gate=1;\
	\cf3 var\cf0  e, m;\
	\cf2 //e = Env.adsr(exprand(0.001,maxAttack), linrand(3.0), \cf0 1.0.rand.squared, rrand(0.001,0.2));\
	e = \cf3 Env\cf0 .perc(exprand(0.001,maxAttack), exprand(0.1,2.0));\
	m = linrand(5) + 1;\
	e = \cf3 EnvGen\cf0 .kr(e, gate,  3.0.rand.squared);\
	\cf3 SinOsc\cf0 .ar(freq * m, 1.3.rand.cubed, e, mix);\
\};\
\
100.do \{ \cf3 |i|\cf0 \
	\cf3 var\cf0  name;\
	name = \cf4 "fmgen_a_"\cf0  ++ i;\
	\cf3 SynthDef\cf0 (name, \{ \cf3 arg\cf0  freq=440, amp=1, gate=1, pan=0;\
		\cf3 var\cf0  c, m;\
					\
		c = 0;\
		[\
			\{\
				\cf2 // sum of 3 modulator->carrier pairs\cf0 \
				[\cf5 \\A\cf0 , i].postln;\
				3.do \{\
					\cf3 var\cf0  f;\
					f = freq + 1.8.rand2.squared;\
					m = modulatorF.(f, 0, gate);\
					c = carrierF.(f, m, c, gate);\
				\}\
			\},\
			\{\
				\cf2 // sum of 2 modulator->modulator->carrier chains\cf0 \
				[\cf5 \\B\cf0 , i].postln;\
				2.do \{\
					\cf3 var\cf0  f, m;\
					f = freq + 1.8.rand2.squared;\
					m = modulatorF.(f, 0, gate);\
					m = middleF.(f, m, 0, gate);\
					c = carrierF.(f, m, c, gate);\
				\}\
			\},\
			\{\
				\cf2 // sum of 2 modulator-+->carrier\cf0 \
				\cf2 //                    |\cf0 \
				\cf2 //                    +->carrier\cf0 \
				[\cf5 \\C\cf0 , i].postln;\
				2.do \{\
					\cf3 var\cf0  f;\
					f = freq + 1.8.rand2.squared;\
					m = modulatorF.(f, 0, gate);\
					c = carrierF.(f, m, c, gate);\
					c = carrierF.(f, m, c, gate);\
				\}\
			\},\
		].choose.value;\
		\
		\cf3 DetectSilence\cf0 .ar(c, doneAction: 2);\
		\cf3 Out\cf0 .ar(0, \cf3 Pan2\cf0 .ar(c, pan, amp));\
	\}).load(s);\
\};\
)\
\
\
(\
\cf2 // listen randomly to the random FM instruments.\cf0 \
\cf3 Routine\cf0 (\{\
	\cf3 var\cf0  name;	\
	s.sendMsg(\cf5 \\s_new\cf0 , \cf5 \\reverb\cf0 , 1000, 1, 0);\
	name = \cf4 "fmgen_a_"\cf0  ++ 100.rand;\
	name.postln;\
	1000.do \{	\
		\cf3 var\cf0  freq, id;\
		if (0.08.coin) \{ name = \cf4 "fmgen_a_"\cf0  ++ 100.rand; name.postln \};\
		[1,1,1,1,1,2,2].choose.do \{\
			freq = rrand(24,84).midicps;\
			id = 1000000000.rand;\
			s.sendMsg(\cf5 \\s_new\cf0 , name, id, 0, 0, \cf5 \\freq\cf0 , freq, \cf5 \\amp\cf0 , 0.4, \cf5 \\pan\cf0 , 1.0.rand2);\
		\};\
		[0.1, 0.1, 0.1, 0.2, 0.2, 0.4, 0.8, 1.6].choose.wait;\
	\};\
	s.sendMsg(\cf5 \\n_free\cf0 , 1000);\
\}).play;\
)\
\
\
}