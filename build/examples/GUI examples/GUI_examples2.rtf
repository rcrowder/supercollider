{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf440
{\fonttbl\f0\fnil\fcharset77 Monaco;\f1\fswiss\fcharset77 Helvetica-Bold;\f2\fswiss\fcharset77 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue0;\red191\green0\blue0;
\red96\green96\blue96;\red191\green0\blue0;\red0\green0\blue191;\red0\green115\blue0;\red0\green115\blue0;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\fs26 \cf2 GUI\cf3 .cocoa;		\cf4 // use Mac OS X native GUI\cf3 \
\cf2 GUI\cf3 .swing;		\cf4 // use Java GUI\cf3 \

\f1\b\fs40 \cf0 \
Creating a window.
\f0\b0\fs26 \
\cf3 \
w = \cf2 GUI\cf3 .window.new(\cf5 "a control panel"\cf3 , \cf2 Rect\cf3 (20, 400, 440, 360));\
\cf0 w.front; \cf6 // make window visible and front window.\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs10 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs40 \cf0 Views are controlled by setting properties.\

\f0\b0\fs26 \
w.view.background = \cf7 Color\cf0 .rand;\
w.view.background = \cf7 Color\cf0 .rand;\
w.view.background = \cf7 Color\cf0 .rand;\
w.view.background = \cf7 Gradient\cf0 (\cf7 Color\cf0 .blue,\cf7 Color\cf0 .green,\cf8 \\v\cf0 );\
w.view.background = \cf7 Gradient\cf0 (\cf7 Color\cf0 .black,\cf7 Color\cf0 .red,\cf8 \\h\cf0 );\
w.view.background = \cf7 Gradient\cf0 (\cf7 Color\cf0 .black,\cf7 Color\cf0 .red,\cf8 \\h, 16\cf0 );\
w.view.background = \cf7 Gradient\cf0 (\cf7 Color\cf0 .black,\cf7 Color\cf0 .red,\cf8 \\h, 128\cf0 );\
w.view.background = \cf7 HiliteGradient\cf0 (\cf7 Color\cf0 .blue,\cf7 Color\cf0 .yellow,\cf8 \\v\cf0 );\
w.view.background = \cf7 HiliteGradient\cf0 (\cf7 Color\cf0 .blue,\cf7 Color\cf0 .yellow,\cf8 \\v\cf0 , 16);\
w.view.background = \cf7 HiliteGradient\cf0 (\cf7 Color\cf0 .blue,\cf7 Color\cf0 .yellow,\cf8 \\v\cf0 , 256);\
w.view.background = \cf7 HiliteGradient\cf0 (\cf7 Color\cf0 .red(0.6),\cf7 Color\cf0 .green,\cf8 \\h\cf0 , 16);\
w.view.background = \cf7 HiliteGradient\cf0 (\cf7 Color\cf0 .red(0.6),\cf7 Color\cf0 .green,\cf8 \\h\cf0 , 256);\
\
(\
\cf7 Routine\cf0 (\{\
	30.do \{\
		w.view.background = \
			\cf7 HiliteGradient\cf0 (\cf7 Color\cf0 .rand(0.0,1.0),\cf7 Color\cf0 .rand(0.0,1.0),\
					[\cf8 \\h\cf0 ,\cf8 \\v\cf0 ].choose, 100, rrand(0.1,0.9));\
		0.5.wait;\
	\};\
\}).play(\cf7 AppClock\cf0 );\
)\
\
\

\f1\b\fs40 The FlowLayout decorator places views one after another.\

\f0\b0\fs26 \
w.view.decorator = \cf7 FlowLayout\cf0 (w.view.bounds);\
\

\f1\b\fs40 A button that adds another one like itself.\

\f0\b0\fs26 \
(\cf3 \
f = \{\
	\cf4 // the arguments for creating a view are the window it is in,\cf3 \
	\cf4 // and the bounds of the view\cf3 \
	b = \cf2 GUI\cf3 .button.new(w, 75 @ 24);\
	\cf4 // states defines the colors and label for the button in different states.\cf3 \
	b.states = [[\cf5 "Add"\cf3 , \cf2 Color\cf3 .black, \cf2 Color\cf3 .rand]];\
	b.action = f;\
\};\
f.value;\
\cf0 )\
\

\f1\b\fs40 A button that changes the background.\

\f0\b0\fs26 \
(\cf3 \
b = \cf2 GUI\cf3 .button.new(w, 75 @ 24);\
b.states = [[\cf5 "Backgnd"\cf3 , \cf2 Color\cf3 .white, \cf2 Color\cf3 .rand]];\
b.action = \{\
		w.view.background = \cf2 Color\cf3 .rand(0.0,1.0); \cf4 // fallback for SwingOSC\cf3 \
		w.view.background = \
			\cf2 HiliteGradient\cf3 (\cf2 Color\cf3 .rand(0.0,1.0),\cf2 Color\cf3 .rand(0.0,1.0),\
					[\cf9 \\h\cf3 ,\cf9 \\v\cf3 ].choose, 100, rrand(0.1,0.9));\
\};\
\cf0 )\
\

\f1\b\fs40 A multi-state button.\

\f0\b0\fs26 \
(\cf3 \
b = \cf2 GUI\cf3 .button.new(w, 75 @ 24);\
b.states = [\
	[\cf5 "Red"\cf3 , \cf2 Color\cf3 .white, \cf2 Color\cf3 .red],\
	[\cf5 "Green"\cf3 , \cf2 Color\cf3 .black, \cf2 Color\cf3 .green],\
	[\cf5 "Blue"\cf3 , \cf2 Color\cf3 .white, \cf2 Color\cf3 .blue],\
	[\cf5 "Yellow"\cf3 , \cf2 Color\cf3 .black, \cf2 Color\cf3 .yellow]\
];\
b.action = \{\cf2 | view |\cf3 \
	if (view.value == 0) \{ w.view.background = \cf2 Color\cf3 .yellow \};\
	if (view.value == 1) \{ w.view.background = \cf2 Color\cf3 .red \};\
	if (view.value == 2) \{ w.view.background = \cf2 Color\cf3 .green \};\
	if (view.value == 3) \{ w.view.background = \cf2 Color\cf3 .blue \};\
\};\
\cf0 )\
\

\f1\b\fs40 A slider that controls window transparency.\

\f0\b0\fs26 \
\cf4 // works on Mac OS X only\cf0 \
(\cf3 \
w.view.decorator.nextLine;\
v = \cf2 GUI\cf3 .slider.new(w, 130 @ 24);\
v.action = \{\cf2 | view |\cf3  \
	\cf4 // Sliders output values from zero to one.\cf3 \
	w.alpha = view.value; \
\};\
v.value = 1;\
\cf0 )\
\
w.alpha = 1;\
w.front;\
\

\f1\b\fs40 A slider that controls window width.\

\f0\b0\fs26 \
(\cf3 \
w.view.decorator.nextLine;\
v = \cf2 GUI\cf3 .slider.new(w, 130 @ 24);\
v.action = \{\cf2 | view |\cf3  \
	\cf2 var\cf3  bounds;\
	bounds = w.bounds;\
	bounds.width = 400 + (400 * view.value);\
	w.bounds = bounds;\
\};\
\cf0 )\
\
w.close;\
w = nil;\
\

\f1\b\fs40 A more useful window.\

\f0\b0\fs26 \
(\
\cf6 // start server\cf0 \
s.boot;\
)\
\
(\
\cf6 // define a synth\cf0 \
\cf7 SynthDef\cf0 (\cf10 "window-test"\cf0 , \{ \cf7 arg\cf0  note = 36, fc = 1000, rq = 0.25, bal=0, amp=0.4, gate = 1;\
		\cf7 var\cf0  x;\
		x = \cf7 Mix\cf0 .fill(4, \{ \
			\cf7 LFSaw\cf0 .ar((note + \{0.1.rand2\}.dup).midicps, 0, 0.02) \
		\});\
		x = \cf7 RLPF\cf0 .ar(x, fc, rq).softclip;\
		x = \cf7 RLPF\cf0 .ar(x, fc, rq, amp).softclip;\
		x = \cf7 Balance2\cf0 .ar(x[0], x[1], bal);\
		x = x * \cf7 EnvGen\cf0 .kr(\cf7 Env\cf0 .cutoff, gate, doneAction: 2);\
		\cf7 Out\cf0 .ar(0, x);\
	\}, [0.1, 0.1, 0.1, 0.1, 0.1, 0]\
).load(s);\
)\
\
(\cf3 \
\cf4 // make the window\cf3 \
w = \cf2 GUI\cf3 .window.new(\cf5 "another control panel"\cf3 , \cf2 Rect\cf3 (20, 400, 440, 360));\
w.front; \cf4 // make window visible and front window.\cf3 \
w.view.decorator = \cf2 FlowLayout\cf3 (w.view.bounds);\
w.view.background = \cf2 Color\cf3 .rand(0.0,1.0); \cf4 // fallback for SwingOSC\cf3 \
w.view.background = \cf2 HiliteGradient\cf3 (\cf2 Color\cf3 .rand(0.0,1.0),\cf2 Color\cf3 .rand(0.0,1.0),\
					[\cf9 \\h\cf3 ,\cf9 \\v\cf3 ].choose, 100, rrand(0.1,0.9));\
\cf0 )\
\
(\cf3 \
\cf4 // add a button to start and stop the sound.\cf3 \
b = \cf2 GUI\cf3 .button.new(w, 75 @ 24);\
b.states = [[\cf5 "Start"\cf3 , \cf2 Color\cf3 .black, \cf2 Color\cf3 .green],[\cf5 "Stop"\cf3 , \cf2 Color\cf3 .white, \cf2 Color\cf3 .red]];\
b.action = \{\cf2 |view|\cf3 \
		if (view.value == 1) \{\
			s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "window-test"\cf3 , 9999, 0, 0);\
		\};\
		if (view.value == 0) \{\
			s.sendMsg(\cf5 "/n_set"\cf3 , 9999, \cf5 "gate"\cf3 , 0);\
		\};\
\};\
\cf0 )\
\
(\cf3 \
\cf4 // add a label\cf3 \
w.view.decorator.nextLine;\
v = \cf2 GUI\cf3 .staticText.new(w, 80 @ 24);\
v.string = \cf5 "Note"\cf3 ;\
v.stringColor = \cf2 Color\cf3 .white;\
v.align = \cf9 \\right\cf3 ;\
\cf0 )\
\
v.align = \cf8 \\left\cf0 ;\
v.align = \cf8 \\center\cf0 ;\
v.align = \cf8 \\right\cf0 ;\
\
(\cf3 \
\cf4 // create a ControlSpec for mapping values to correct range.\cf3 \
~noteSpec = \cf2 ControlSpec\cf3 (24, 60, \cf9 \\lin\cf3 , 1);\
\cf4 // create slider and number views.\cf3 \
~noteSlider = \cf2 GUI\cf3 .slider.new(w, 200 @ 24);\
~noteNumBox = \cf2 GUI\cf3 .numberBox.new(w, 64 @ 24);\
\
~noteSlider.step = 1/(60-24);\
~noteSlider.action = \{\cf2 |view|\cf3 \
	\cf2 var\cf3  note;\
	note = ~noteSpec.map(view.value);\
	~noteNumBox.value = note;\
	s.sendMsg(\cf5 "/n_set"\cf3 , 9999, \cf5 "note"\cf3 , note);\
\};\
\
~noteNumBox.action = \{\cf2 |view|\cf3 \
	\cf2 var\cf3  note;\
	note = view.value;\
	s.sendMsg(\cf5 "/n_set"\cf3 , 9999, \cf5 "note"\cf3 , note);\
	~noteSlider.value = ~noteSpec.unmap(note);\
\};\
~noteNumBox.align = \cf9 \\center\cf3 ;\
\cf0 )\
\
\
\
\
\
\

\f1\b\fs40 That is a lot of work for something simple, so I made a wrapper class. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0 \cf0 EZSlider takes care of the details for you.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\qc

\f1\b \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b0\fs26 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs40 \cf0 EZSlider is a wrapper for a SCStaticText, an SCSlider, and an SCNumberBox along with the logic to manage them.
\f1\b \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b0\fs26 \cf0 \
(\
\cf6 // create controls.\cf0 \
w.view.decorator.nextLine;\
v = \cf7 EZSlider\cf0 (w, 400 @ 24, \cf10 "Note"\cf0 , \cf7 ControlSpec\cf0 (24, 60, \cf8 \\lin\cf0 , 1), \
	\{\cf7 |ez|\cf0  s.sendMsg(\cf10 "/n_set"\cf0 , 9999, \cf10 "note"\cf0 , ez.value); \});\
	\
w.view.decorator.nextLine;\
v = \cf7 EZSlider\cf0 (w, 400 @ 24, \cf10 "Cutoff"\cf0 , \cf7 ControlSpec\cf0 (200, 5000, \cf8 \\exp\cf0 ), \
	\{\cf7 |ez|\cf0  s.sendMsg(\cf10 "/n_set"\cf0 , 9999, \cf10 "fc"\cf0 , ez.value); \});\
	\
w.view.decorator.nextLine;\
v = \cf7 EZSlider\cf0 (w, 400 @ 24, \cf10 "Resonance"\cf0 , \cf7 ControlSpec\cf0 (0.1, 0.7), \
	\{\cf7 |ez|\cf0  s.sendMsg(\cf10 "/n_set"\cf0 , 9999, \cf10 "rq"\cf0 , ez.value); \});\
	\
w.view.decorator.nextLine;\
v = \cf7 EZSlider\cf0 (w, 400 @ 24, \cf10 "Balance"\cf0 , \cf8 \\bipolar\cf0 , \
	\{\cf7 |ez|\cf0  s.sendMsg(\cf10 "/n_set"\cf0 , 9999, \cf10 "bal"\cf0 , ez.value); \});\
	\
w.view.decorator.nextLine;\
v = \cf7 EZSlider\cf0 (w, 400 @ 24, \cf10 "Amp"\cf0 , \cf8 \\db\cf0 , \
	\{\cf7 |ez|\cf0  s.sendMsg(\cf10 "/n_set"\cf0 , 9999, \cf10 "amp"\cf0 , ez.value.dbamp); \});\
)\
\
\
\

\f1\b\fs40 There are still some problems:\
	\'a5 Restarting the sound doesn't remember the slider settings.\
	\'a5 cmd-period doesn't change the button.\
	\'a5 Closing window doesn't stop the sound.\
Need a more comprehensive approach.\
\
\

\f0\b0\fs26 \
(\cf3 \
\cf2 var\cf3  w, startButton, noteControl, cutoffControl, resonControl;\
\cf2 var\cf3  balanceControl, ampControl;\
\cf2 var\cf3  id, cmdPeriodFunc;\
\
id = s.nextNodeID; \cf4 // generate a note id.\cf3 \
\
\cf4 // make the window\cf3 \
w = \cf2 GUI\cf3 .window.new(\cf5 "another control panel"\cf3 , \cf2 Rect\cf3 (20, 400, 440, 180));\
w.front; \cf4 // make window visible and front window.\cf3 \
w.view.decorator = \cf2 FlowLayout\cf3 (w.view.bounds);\
\
w.view.background = \cf2 HiliteGradient\cf3 (\cf2 Color\cf3 .rand(0.0,1.0),\cf2 Color\cf3 .rand(0.0,1.0),\
					[\cf9 \\h\cf3 ,\cf9 \\v\cf3 ].choose, 100, rrand(0.1,0.9));\
\
\cf4 // add a button to start and stop the sound.\cf3 \
startButton = \cf2 GUI\cf3 .button.new(w, 75 @ 24);\
startButton.states = [\
	[\cf5 "Start"\cf3 , \cf2 Color\cf3 .black, \cf2 Color\cf3 .green],\
	[\cf5 "Stop"\cf3 , \cf2 Color\cf3 .white, \cf2 Color\cf3 .red]\
];\
startButton.action = \{\cf2 |view|\cf3 \
		if (view.value == 1) \{\
			\cf4 // start sound\cf3 \
			s.sendMsg(\cf5 "/s_new"\cf3 , \cf5 "window-test"\cf3 , id, 0, 0, \
				\cf5 "note"\cf3 , noteControl.value,\
				\cf5 "fc"\cf3 , cutoffControl.value,\
				\cf5 "rq"\cf3 , resonControl.value,\
				\cf5 "bal"\cf3 , balanceControl.value,\
				\cf5 "amp"\cf3 , ampControl.value.dbamp);\
		\};\
		if (view.value == 0) \{\
			\cf4 // set gate to zero to cause envelope to release\cf3 \
			s.sendMsg(\cf5 "/n_set"\cf3 , id, \cf5 "gate"\cf3 , 0);\
		\};\
\};\
\
\cf4 // create controls for all parameters\cf3 \
w.view.decorator.nextLine;\
noteControl = \cf2 EZSlider\cf3 (w, 400 @ 24, \cf5 "Note"\cf3 , \cf2 ControlSpec\cf3 (24, 60, \cf9 \\lin\cf3 , 1), \
	\{\cf2 |ez|\cf3  s.sendMsg(\cf5 "/n_set"\cf3 , id, \cf5 "note"\cf3 , ez.value); \}, 36);\
	\
w.view.decorator.nextLine;\
cutoffControl = \cf2 EZSlider\cf3 (w, 400 @ 24, \cf5 "Cutoff"\cf3 , \cf2 ControlSpec\cf3 (200, 5000, \cf9 \\exp\cf3 ), \
	\{\cf2 |ez|\cf3  s.sendMsg(\cf5 "/n_set"\cf3 , id, \cf5 "fc"\cf3 , ez.value); \}, 1000);\
	\
w.view.decorator.nextLine;\
resonControl = \cf2 EZSlider\cf3 (w, 400 @ 24, \cf5 "Resonance"\cf3 , \cf2 ControlSpec\cf3 (0.1, 0.7), \
	\{\cf2 |ez|\cf3  s.sendMsg(\cf5 "/n_set"\cf3 , id, \cf5 "rq"\cf3 , ez.value); \}, 0.2);\
	\
w.view.decorator.nextLine;\
balanceControl = \cf2 EZSlider\cf3 (w, 400 @ 24, \cf5 "Balance"\cf3 , \cf9 \\bipolar\cf3 , \
	\{\cf2 |ez|\cf3  s.sendMsg(\cf5 "/n_set"\cf3 , id, \cf5 "bal"\cf3 , ez.value); \}, 0);\
	\
w.view.decorator.nextLine;\
ampControl = \cf2 EZSlider\cf3 (w, 400 @ 24, \cf5 "Amp"\cf3 , \cf9 \\db\cf3 , \
	\{\cf2 |ez|\cf3  s.sendMsg(\cf5 "/n_set"\cf3 , id, \cf5 "amp"\cf3 , ez.value.dbamp); \}, -6);\
	\
\
\cf4 // set start button to zero upon a cmd-period\cf3 \
cmdPeriodFunc = \{ startButton.value = 0; \};\
\cf2 CmdPeriod\cf3 .add(cmdPeriodFunc);\
\
\cf4 // stop the sound when window closes and remove cmdPeriodFunc.\cf3 \
w.onClose = \{\
	s.sendMsg(\cf5 "/n_free"\cf3 , id);\
	\cf2 CmdPeriod\cf3 .remove(cmdPeriodFunc);\
\};\
\
\cf0 )\
\
}