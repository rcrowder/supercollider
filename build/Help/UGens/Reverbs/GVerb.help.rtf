{\rtf1\ansi\ansicpg1252\cocoartf949
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green115\blue0;\red191\green0\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 GVerb			Reverb\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf0 #left, right = GVerb.ar(in, roomsize, revtime, damping, inputbw, spread, drylevel, earlyreflevel, taillevel, \
	maxroomsize, mul, add)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b0 \cf0 \
GVerb code is based on the GVerb LADSPA by Juhana Sadeharju (kouhia at nic.funet.fi).\
\
outputs 2 channels of reverb.\
\
	
\b in -
\b0  mono input\
	
\b roomsize -
\b0  in meters\
	
\b revtime -
\b0  in seconds\
	
\b damping -
\b0  0 to 1, high frequency rolloff, 0 damps the reverb signal completely, 1 not at all\
	
\b inputbw -
\b0  0 to 1, same as damping control, but on the input signal\
	
\b spread -
\b0  a control on the stereo spread and diffusion of the reverb signal\
	
\b drylevel -
\b0  amount of dry signal\
	
\b earlyreflevel -
\b0  amount of early reflection level\
	
\b taillevel -
\b0  amount of tail level\
	
\b maxroomsize -
\b0  to set the size of the delay lines. Defaults to roomsize + 1\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\b \cf0 *Known issues*
\b0 \
\
There is a large CPU spike when the synth is instantiated while all the delay lines are zeroed out.\
Quick changes in roomsize result in zipper noise.
\f1\fs20 \cf2 \

\f0\b\fs24 \cf0 Changing the roomsize does not work properly! Still trying to look for the bug... (-josh)
\f1\b0\fs20 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 \
SynthDef\cf0 (\cf3 \\test\cf0 , \{\cf2 arg\cf0  roomsize, revtime, damping, inputbw, spread = 15, drylevel, earlylevel,\
		taillevel;\
	var a = \cf2 Dust\cf0 .ar(10);\
//	var a = AudioIn.ar(1);\
//	var a = PlayBuf.ar(1, 0);\
	\cf2 Out\cf0 .ar(0, \cf2 GVerb\cf0 .ar(\
		a,\
		roomsize, \
		revtime, \
		damping, \
		inputbw, \
		spread, \
		drylevel.dbamp,\
		earlylevel.dbamp, \
		taillevel.dbamp,\
		roomsize, 0.3) + a)\}).load(s)\
	\
s = Server.internal.boot;\
s.scope(2);\
\
\cf4 // bathroom\cf0 \
s.sendMsg(\cf3 \\s_new\cf0 , \cf3 \\test\cf0 , a=s.nextNodeID, 0, 1, \cf3 \\roomsize\cf0 , 5, \cf3 \\revtime\cf0 , 0.6, \cf3 \\damping\cf0 , 0.62, \cf3 \\inputbw\cf0 , 0.48, \cf3 \\drylevel\cf0  -6, \cf3 \\earlylevel\cf0 , -11, \cf3 \\taillevel\cf0 , -13);\
s.sendMsg(\cf3 \\n_free\cf0 , a);\
\
\cf4 //living room\cf0 \
s.sendMsg(\cf3 \\s_new\cf0 , \cf3 \\test\cf0 , a=s.nextNodeID, 0, 1, \cf3 \\roomsize\cf0 , 16, \cf3 \\revtime\cf0 , 1.24, \cf3 \\damping\cf0 , 0.18, \cf3 \\inputbw\cf0 , 0.95, \cf3 \\drylevel\cf0  -3, \cf3 \\earlylevel\cf0 , -15, \cf3 \\taillevel\cf0 , -17);\
s.sendMsg(\cf3 \\n_free\cf0 , a);\
\
\cf4 //church\cf0 \
s.sendMsg(\cf3 \\s_new\cf0 , \cf3 \\test\cf0 , a=s.nextNodeID, 0, 1, \cf3 \\roomsize\cf0 , 80, \cf3 \\revtime\cf0 , 4.85, \cf3 \\damping\cf0 , 0.41, \cf3 \\inputbw\cf0 , 0.19, \cf3 \\drylevel\cf0  -3, \cf3 \\earlylevel\cf0 , -9, \cf3 \\taillevel\cf0 , -11);\
s.sendMsg(\cf3 \\n_free\cf0 , a);\
s.quit\
\
\cf4 // cathedral\cf0 \
s.sendMsg(\cf3 \\s_new\cf0 , \cf3 \\test\cf0 , a=s.nextNodeID, 0, 1, \cf3 \\roomsize\cf0 , 243, \cf3 \\revtime\cf0 , 1, \cf3 \\damping\cf0 , 0.1, \cf3 \\inputbw\cf0 , 0.34, \cf3 \\drylevel\cf0  -3, \cf3 \\earlylevel\cf0 , -11, \cf3 \\taillevel\cf0 , -9);\
s.sendMsg(\cf3 \\n_free\cf0 , a);\
\
\cf4 // canyon\cf0 \
s.sendMsg(\cf3 \\s_new\cf0 , \cf3 \\test\cf0 , a=s.nextNodeID, 0, 1, \cf3 \\roomsize\cf0 , 300, \cf3 \\revtime\cf0 , 103, \cf3 \\damping\cf0 , 0.43, \cf3 \\inputbw\cf0 , 0.51, \cf3 \\drylevel\cf0  -5, \cf3 \\earlylevel\cf0 , -26, \cf3 \\taillevel\cf0 , -20);\
s.sendMsg(\cf3 \\n_free\cf0 , a);\
\
s.quit;}