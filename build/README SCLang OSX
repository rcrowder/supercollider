
The steps bellow assume you have succesfully built the SCLang target in the XCode Project.

Open a terminal and change your working directory to the build directory inside the SuperCollider source tree.

An easy way to accomplish this is by typing 'cd' (no quotes), a space and then drag and drop the build folder from a finder window on top of the terminal.

The command will look something like this:

$ cd /path/to/your/source/tree/SuperCollider3/build

Press enter.

Copy the sclang exacutable to a directory in your shell's path. This could be $HOME/bin (handy) if you set that one up.
We will place it in /usr/local/bin for this example:

$ sudo cp sclang /usr/local/bin

Verify sclang is found:

$ which sclang
/usr/local/bin/sclang

Inspect SCLang command line switches:

$ sclang -h

Export a copy of SCClassLibrary to be used with SCLang.
For this example we will keep this copy in your home directory inside a folder named sclang.

Create the folder (could use the finder to create the folder also)
$ mkdir ~/sclang

The actual svn export command
$ svn export SCClassLibrary/ ~/sclang/SCClassLibrary

Edit the startup method in OSXPlatform.sc of the _exported_ SCClassLibrary.

Use 'open' if SuperCollider3.app is already installed in your system, else nagivate to the folder in the finder and use TextEdit.

$ open ~/sclang/SCClassLibrary/Platform/osx/OSXPlatform.sc

Make these changes/additions:

	startup {
	//	Document.implementationClass.startup;
		if ( this.hasFeature( \emacs ) ) {
				Document.implementationClass.startup;
		};
		// make server window
	//	Server.internal.makeWindow;
	//	Server.local.makeWindow;
		this.loadStartupFiles;
	}

	// this is odd - set it to whatever kit you will use but cocoa
	// cocoa primitives do not exist in SCLang and things will fail
	// if a view is created.
	defaultGUIScheme { ^\cocoa }

Save your changes.

In the next lines, ^[ means pressing Ctrl [ and ^D means Ctrl D

Launch sclang using the library we just exported and edited.

	$ sclang -d ~/sclang

SCLang boots here...

type:
	"Hello, World".postln;^[

-> Hello, World!

^D

sclang finishes.

You will note SCLang's CPU usage goes all the way up - close to 100%.
Use pipes to go around this.
Check the cpu usage is back to normal:

	$ tail -f | sclang -d ~/sclang

"Hello, World!".postln;^[
^D

-> Hello, World!

^C

Another way is:
	$ cd ~/sclang
	$ mkfifo fifo

then make sclang read from it:
	$ tail -f fifo | sclang &

now, you can do this:
	$ cat  > fifo
"Hello, World!".postln;^[
^D
Hello, World!

do not forget to terminate the tail and sclang (background) process.
	$ killAll -HUP tail

About Emacs in OS X.
Consult linux/scel/README for information on scel.
In brief installation steps are as follows:

Add these two lines to your dot emacs file (create one if it doesnt exist).

(add-to-list 'load-path "~/sclang/el")
(require 'sclang)

save the changes.

copy linux/scel/el to ~/sclang
copy linux/scel/sc to ~/sclang/SCClassLibrary

launch sclang el:

$ cd ~/sclang
$ emacs -sclang


