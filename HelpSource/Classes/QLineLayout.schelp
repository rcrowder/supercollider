CLASS:: QLineLayout
summary:: Superclass of layouts that distribute views in a line
categories:: GUI>Layout
related:: Classes/StretchItem, Classes/SpacerItem, Guides/GUI-Layout-Management

DESCRIPTION::
The two subclasses - QHLayout and QVLayout - distribute views in a horizontal or vertical line, respectively.

subsection:: Fine tuning

Each item can be assigned a stretch factor and an alignment flag to fine tune how its size and position are managed. This can be done at layout link::#*new#construction::, when an item is added with link::#-add:: method or for an already contained item with link::#-setStretch:: and link::#-setAlignment:: methods.

Stretch factors only affects distribution in the direction of the layout (vertical or horizontal). All items have a stretch factor of 0 by default, so only their own preferences will determine space distribution. As soon as an item is assigned a stretch factor higher than 0, the space will be redistributed according to proportions of stretch factors.

subsection:: Leaving empty space

An empty space with an arbitrary stretch factor or an empty space of fixed size may be placed instead of an item by using link::Classes/StretchItem::  and link::Classes/SpacerItem:: classes. See link::#*new#constructor:: and link::#-add:: as well as documentation of those classes for details.


CLASSMETHODS::

PRIVATE:: layoutClass
PRIVATE:: parse

METHOD:: new

Create a QLineLayout and immediately fill it with items given as arguments.

argument:: items
A sequence of items that the layout will distribute in the given order. An item can be a QView, a QLayout, a StretchItem or a SpacerItem. You can assign stretch factor and/or alignment to a QView or a QLayout by wrapping it into an array, followed by pairs of (\stretch, factor) and/or (\align, flag), for example:

code::
w = Window.new;
w.layout = QVLayout(
	[Button(), \stretch, 1, \align, \bottomLeft],
	SpacerItem(20),
	[TextView(), \stretch, 3]
);
w.front;
::


INSTANCEMETHODS::

METHOD:: add
Add an item to the right or the bottom end of the line, for QHLayout and QVLayout respectively. 

argument:: item
The item can be a QView, a QLayout, a StretchItem or a SpacerItem. If it is one of the last two, the following arguments have no effect.

argument:: stretch
An integer stretch factor.

argument:: align
A symbol expressing the alignment.


METHOD:: setStretch
Set stretch factor of an item contained in the layout.

argument:: item
A QView or QLayout managed by the layout.

argument:: stretch
An integer stretch factor.


METHOD:: setStretchAt
Set stretch factor of an item contained in the layout at given index.

argument:: index
An integer position of an item in the layout.

argument:: stretch
An integer stretch factor.


METHOD:: setAlignment
Set alignment of an item contained in the layout.

argument:: item
A QView or a QLayout managed by the layout.

argument:: align
A symbol expressing the alignment.


METHOD:: setAlignmentAt
Set alignment of an item contained in the layout at given index.

argument:: index
An integer position of an item in the layout.

argument:: align
A symbol expressing the alignment.

EXAMPLES::

Try resizing the window created by the following code.

code::
w = Window.new;
w.layout = QVLayout(
	QTextView(),
	QHLayout(
		QButton().states_([["Foo"]]),
		LineItem( QTextField().string_("Bar"), stretch: 1 ),
		LineItem( QTextField().string_("BarBarBar"), stretch: 4 )
	)
);
w.front;
::