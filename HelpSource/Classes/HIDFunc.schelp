TITLE:: HIDFunc
summary:: Fast responder for incoming data from human input devices (HID)
categories:: External control>HID
related:: Classes/HID, Classes/HIDdef, Classes/OSCFunc, Classes/MIDIFunc, Guides/Working_with_HID

DESCRIPTION::
Human input devices can be used as controllers for making music. This class provides you with access to them in a way similar to OSCFunc and MIDIFunc.

HIDFunc (and its subclass link::Classes/HIDdef::) registers one or more functions to respond to an incoming HID message. Many of its methods are inherited from its superclass link::Classes/AbstractResponderFunc::.

note:: HIDFuncs are removed on Cmd-. by default. This can be overriden using either of the fix or permanent methods.::


The development of this SuperCollider implementation of HID access was funded by the SuperCollider community and BEK, Bergen Elektronisk Kunst, Bergen, Norway, http://www.bek.no


CLASSMETHODS::

PRIVATE:: initClass, cmdPeriod

METHOD:: defaultDispatchers
Get or set an link::Classes/IdentityDictionary:: containing the default dispatcher objects for HIDFuncs of different types (these are what you get if you pass nil as the dispatcher argument to link::#*new::). These objects will decide if any of their registered HIDFuncs should respond to an incoming HID message. The dictionary should have the keys code::[\usage, \usageID, \device, \element]:: and values of an appropriate subclass of link::Classes/AbstractDispatcher:: for each message type. By default these will be instances of link::Classes/HIDUsageDispatcher::, link::Classes/HIDUsageIDDispatcher::, link::Classes/HIDDeviceDispatcher:: and link::Classes/HIDElementDispatcher:: respectively.

returns:: The getter returns an link::Classes/IdentityDictionary::.

METHOD:: new
Create a new, enabled HIDFunc. Normally one would use one of the different type specific convenience methods below, rather than use this method directly.

argument:: func
A link::Classes/Function:: or similar object which will respond to the incoming message. When evaluated for XXXXX messages it will be passed the arguments XXXX corresponding to XXXX.

argument:: type
A link::Classes/Symbol:: indicating which kind of HID message this HIDFunc should respond to. One of code::\usage::, code::\usageID::, code::\device::, code::\element::.

argument:: srcID


argument:: argTemplate
An optional link::Classes/Integer:: or link::Classes/Function:: (or object which responds to the method link::Overviews/Methods#matchItem::) used to match the value of an incoming HID message. If a Function, it will be evaluated with the message value as an argument, and should return a link::Classes/Boolean:: indicating whether the message matches and this HIDFunc should respond.

argument:: dispatcher
An optional instance of an appropriate subclass of link::Classes/AbstractDispatcher::. This can be used to allow for customised dispatching. Normally this should not be needed.

returns:: A new instance of HIDFunc.

METHOD:: usage
A convenience method to filter an incoming HID value based on the name of its control usage. E.g. the name of an X-axis of a joystick or the horizontal movement of a mouse has the name code::\X::. These usage names are standardized by manufacturers and are looked up in usage tables based on the information coming from the device. If you have an open HID device, you can look up the available usages with: code::~hid.postUsages::.

ARGUMENT:: func
A link::Classes/Function:: or similar object which will respond to the incoming message. It will be passed...

ARGUMENT:: elUsageName
The name of the usage to look for. This can be one usage name, or an array of usage names.

ARGUMENT:: devUsageName
The name of the device usage to look for, e.g. code::\GamePad:: or code::\Mouse::. If left blank, the code::HIDFunc:: will match any device.

ARGUMENT:: deviceInfo
An link::Classes/IdentityDictionary:: with a more detailed filtering for a device.

ARGUMENT:: argTemplate
(describe argument here)

ARGUMENT:: dispatcher
An optional instance of an appropriate subclass of link::Classes/AbstractDispatcher::. This can be used to allow for customised dispatching. Normally this should not be needed. The default for this type of code::HIDFunc:: is code::HIDUsageDispatcher::

returns:: A new instance of HIDFunc which responds to a specific element usage and device type.


METHOD:: device
A convenience method to filter an incoming HID value based on the name of its control usage. E.g. the name of an X-axis of a joystick or the horizontal movement of a mouse has the name code::\X::. These usage names are standardized by manufacturers and are looked up in usage tables based on the information coming from the device. If you have an open HID device, you can look up the available usages with: code::~hid.postUsages::. This type of HIDFunc differs from code::HIDFunc.usage:: in that it filter specifically by device name, rather than device usage.

ARGUMENT:: func
A link::Classes/Function:: or similar object which will respond to the incoming message. It will be passed...

ARGUMENT:: elUsageName
The name of the usage to look for. This can be one usage name, or an array of usage names.

ARGUMENT:: devName
The name of the device to look for, note that this has to match the string as returned by the device exactly. You can look this string up in the device list: code::HID.postAvailable::

ARGUMENT:: deviceInfo
An link::Classes/IdentityDictionary:: with a more detailed filtering for a device.

ARGUMENT:: argTemplate
(describe argument here)

ARGUMENT:: dispatcher
An optional instance of an appropriate subclass of link::Classes/AbstractDispatcher::. This can be used to allow for customised dispatching. Normally this should not be needed. The default for this type of code::HIDFunc:: is code::HIDDeviceDispatcher::

returns:: A new instance of HIDFunc which responds to a specific element usage for a specific device.


METHOD:: usageID
A convenience method to filter an incoming HID value based on the number of its control usage. If the device is using a non-standard usage number, then this method can be used to look for it. A controls usage is fully specified by its usage ID, and its usage page.

ARGUMENT:: func
A link::Classes/Function:: or similar object which will respond to the incoming message. It will be passed...usage

ARGUMENT:: elUsageID
The id (an link::Classes/Integer::) of the usage to look for. This can be one usage id, or an array of usage ids.

ARGUMENT:: elPageID
The id (an link::Classes/Integer::) of the page of the usage to look for. This can be one page id, or an array of page ids.

ARGUMENT:: deviceName
Since this type of HIDFunc is meant for non-standardized controls, you can filter by a specific device name, rather than a general usage.

ARGUMENT:: deviceInfo
An link::Classes/IdentityDictionary:: with a more detailed filtering for a device.

ARGUMENT:: argTemplate
(describe argument here)

ARGUMENT:: dispatcher
An optional instance of an appropriate subclass of link::Classes/AbstractDispatcher::. This can be used to allow for customised dispatching. Normally this should not be needed. The default for this type of code::HIDFunc:: is code::HIDUsageIDDispatcher::

returns:: A new instance of HIDFunc which responds to a specific element usage id for a specific device.


METHOD:: element
A convenience method to filter an incoming HID value based on the index of its element. If the device is using something non-standard, or you want to access keyboard elements directly, then this method can be used to look for it. Note that the element index is not necessarily the same across different operating systems (i.e. it may vary between Linux and OSX and Windows).

ARGUMENT:: func
A link::Classes/Function:: or similar object which will respond to the incoming message. It will be passed...

ARGUMENT:: elID
The id (an link::Classes/Integer::) of the element to look for. This can be one element id, or an array of element ids.

ARGUMENT:: deviceName
Since this type of HIDFunc is meant for non-standardized elements, you can filter by a specific device name, rather than a general usage.

ARGUMENT:: deviceInfo
An link::Classes/IdentityDictionary:: with a more detailed filtering for a device.

ARGUMENT:: argTemplate
(describe argument here)

ARGUMENT:: dispatcher
An optional instance of an appropriate subclass of link::Classes/AbstractDispatcher::. This can be used to allow for customised dispatching. Normally this should not be needed. The default for this type of code::HIDFunc:: is code::HIDElementDispatcher::

returns:: A new instance of HIDFunc which responds to a specific element id for a specific device.

SUBSECTION:: Debugging

METHOD:: trace
A convenience method which dumps all incoming MIDI messages.

argument:: bool
A link::Classes/Boolean:: indicating whether dumping is on or off.


INSTANCEMETHODS::

PRIVATE:: initUsageID, initDevice, printOn, initElement, init, initUsage

METHOD:: type
The type of HIDFunc.

returns:: a link::Classes/Symbol::, one of code::\usage::, code::\device::, code::\usageID:: or code::\element::.

METHOD:: elUsage
The usage name, usage id, or element id of the element/control to match, depending on the type of HIDFunc

METHOD:: elPage
The usage page of the control to match (only used for HIDFuncs of type code::\usageID::)

METHOD:: devUsage
The device usage or device name of the element/control to match, depending on the type of HIDFunc

METHOD:: deviceTemplate
An link::Classes/IdentityDictionary::

returns:: (describe returnvalue here)

METHOD:: argTemplate
(describe method here)

returns:: (describe returnvalue here)

EXAMPLES::

code::
(some example code)
::