class::Main
categories::Core>Kernel
summary:: The concrete instance of Process
related:: Classes/StartUp

description::

Main is the concrete instance of link::Classes/Process:: (the runtime environment for the virtual machine and interpreter).
Main overrides some methods of Process. There are two methods of interest. One is named startup and is 
called after the class library has been compiled. The other is called shutdown which gets called when the library gets re-compiled.

The singleton instance of Main is available through the special keyword thisProcess. 
For example, to find out what platform you're on:

code::
thisProcess.platform;	// --> e.g. "an OSXPlatform", "a LinuxPlatform", ...
::

classMethods::

subsection:: SuperCollider version
These class methods tell you which version of SuperCollider you are running and whether that version complies to your required minimum / maximum settings:

method::version

returns:: the current version as a human readable string

method::versionAtLeast
check if we are running at least version maj.min
code::
Main.versionAtLeast( 3, 1 );
::
returns:: true or false

method::versionAtMost
check if we are running version maj.min or older
code::
Main.versionAtMost( 3, 1 );
::
returns:: true or false

instanceMethods::

private::prArgv

method::startup

Called after the class library has been compiled.

discussion::
This calls the superclass' startup, which among other things initializes the link::Classes/AppClock:: and the top-level link::Classes/Environment::.

Main's startup then stores Server.default in the interpreter variable s, sets the platform default's link::Classes/GUI:: kit, initializes the link::Classes/GeneralHID:: system, calls a link::Classes/Platform:: specific startup method (for example OSXPlatform's startup opens the server windows), and finally invokes StartUp.run.

To add your own startup functionalities, you could either edit the special startup-file ( discussed in link::Guides/Using-the-Startup-File:: ), or use StartUp.add as discussed in the link::Classes/StartUp:: help file.

method::shutdown

Called after SuperCollider is quit or the class library is about to be re-compiled.

discussion::
This will quit all audio link::Classes/Server:: instances, perform a platform specific shutdown (e.g. on Mac OS X, the HID service is released), finally Process' shutdown method is called, resulting successive calls to UI.shutdown, NetAddr.disconnectAll, File.closeAll, and Archive.write. To register your own shutdown code, use a call like this:

code::
UI.registerForShutdown({ "Good bye!!".postln });
::

method::run

Override this to do whatever you want, e. g. add a class extension file like this to the class library:

code::
+ Main {
	run { "myPatch.rtf".load }
}
::

method::recvOSCfunc

You can store a custom function in this field that gets called whenever SuperCollider language (the client) receives an OSC message.

discussion::
This is very useful for debugging OSC-communication with other applications (e.g. Processing, Pure Data, but also the scsynth server).

code::
// post all incoming traffic except the server status messages
(
thisProcess.recvOSCfunc = { |time, replyAddr, msg| 
	if(msg[0] != '/status.reply') {
		"At time %s received message % from %\n".postf( time, msg, replyAddr )
	}  
}
);

// stop posting.
thisProcess.recvOSCfunc = nil;
::

method::pid

Returns:: The operating system's pid (process ID) for the process.

method::preferencesAction

A function to evaluate when the SuperCollider preferences menu is selected.

code::
thisProcess.preferencesAction = { arg process; SCWindow.new.front; }
::

method::recompile

Recompiles the class library. This is equivalent to restarting SC. Currently OSX (SuperCollider.app) only.

method::platform
Get the current link::Classes/Platform::

method::argv
Get the command-line arguments passed to sclang.

