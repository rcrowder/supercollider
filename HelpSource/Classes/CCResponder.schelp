class:: CCResponder
summary:: allow functions to be registered to respond to MIDI control change events
related:: Classes/MIDIResponder, Classes/NoteOnResponder
categories:: Control, MIDI


ClassMethods::

method::new

argument::function
A link::Classes/Function:: to be evaluated. Arguments passed to the function are: src, chan, num, value.

argument::src
The src number may be the system UID (obtained from code:: MIDIClient.sources[index].uid ::) or the index of the source in the code:: MIDIClient.sources :: array. nil matches all.

argument::chan
An link::Classes/Integer:: between 0 and 15 that selects which MIDI channel to match. nil matches all. May also be a link::Classes/Function:: which will be evaluated to determine the match. eg: { |val| val < 2 }

argument::num
An link::Classes/Integer:: between 0 and 127 that selects which controller number to match. nil matches all. May also be a link::Classes/Function:: which will be evaluated to determine the match. eg: { |val| val >= 4 }

argument::value
An link::Classes/Integer:: between 0 and 127 to filter values. nil matches all. May also be a link::Classes/Function:: which will be evaluated to determine the match. eg: { |val| val < 50 }

InstanceMethods::

method::learn
Wait for the next CC message, reset to match src, chan, cc num.
code::
(

c = CCResponder({ |src,chan,num,value|
		[src,chan,num,value].postln;
	});
	c.learn; // wait for the first controller
)
CCResponder.removeAll
::


Examples::

code::
(
	c = CCResponder({ |src,chan,num,value|
		[src,chan,num,value].postln;
		},
		nil, // any source
		nil, // any channel
		nil, // any CC number
		nil // any value
	)
)

c.remove
::

code::
(
	c = CCResponder({ |src,chan,num,value|
		[src,chan,num,value].postln;
		},
		nil, // any source
		nil, // any channel
		80, // CC number 80
		{ |val| val < 50 } // any value less than 50
	)
)

c.remove
::
