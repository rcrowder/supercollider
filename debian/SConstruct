import os, shutil, sys

Import('env')


#--------------------------------------------------------- 
# important constants; i.e. svn rev, paths..
#--------------------------------------------------------- 

# svn revision
SVN_VERSION = os.popen('svnversion ..').read()[:-1]
SVN_VERSION = SVN_VERSION.split(':')[-1]

DEBNAME = "supercollider3"
DEBVERSION = "0.01"
DEBMAINT = " Some Body [me@myaddr.org]"
DEBARCH = "i386"
DEBDEPENDS = "other-package1, other-package2"
DEBDESC = "SuperCollider is an environment and programming language for real time audio synthesis and algorithmic composition. It provides an interpreted object-oriented language which functions as a network client to a state of the art, realtime sound synthesis server."

# paths
ROOT_PATH = os.getcwd()

SC_DIR = os.path.split(ROOT_PATH)[0]
SC_BINARIES = [
    os.path.join(SC_DIR,"build/scsynth"),
    os.path.join(SC_DIR,"build/sclang")
    ]
SC_LIBRARIES = [
    os.path.join(SC_DIR,"build/libscsynth.a"),
    os.path.join(SC_DIR,"build/libsclang.so"),
    os.path.join(SC_DIR,"build/libscsynth.so")
    ]
SC_PLUGINS = os.path.join(SC_DIR,"build/plugins")
SC_HELP_DIR = os.path.join(SC_DIR,"build/Help")
SC_PKGCONFIG_FILES = [
    os.path.join(SC_DIR,"linux/libsclang.pc"),
    os.path.join(SC_DIR,"linux/libscsynth.pc")
    ]
SC_CLASS_LIBRARY = os.path.join(SC_DIR,"build/SCClassLibrary")
SC_SCEL_EL = os.path.join(SC_DIR,"linux/scel/el")
SC_SCEL_SC = os.path.join(SC_DIR,"linux/scel/sc")
SC_DOC = os.path.join(SC_DIR,"build/examples")
SC_DEV = [
    os.path.join(SC_DIR,"Headers/common"),
    os.path.join(SC_DIR,"Headers/lang"),
    os.path.join(SC_DIR,"Headers/plugin_interface"),
    os.path.join(SC_DIR,"Headers/server")
    ]
SC_CONF = [
    os.path.join(SC_DIR,"linux/examples/sclang.cfg"),
    os.path.join(SC_DIR,"linux/examples/sclang.sc"),
    ]

#--------------------------------------------------------- 
# create .deb directory structure for 
#--------------------------------------------------------- 

if os.path.exists(os.path.join(ROOT_PATH,"supercollider3")):
    print "supercollider3 directory already exists: \t cleaning up....."
    #remove old directory tree
    shutil.rmtree(os.path.join(ROOT_PATH,"supercollider3"))
    #make new directory tree
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/etc"))    
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/share"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/share/SuperCollider"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/share/emacs"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/share/doc"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/share/doc/SuperCollider"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/lib"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/lib/SuperCollider"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/lib/pkgconfig"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/bin"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/include"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/include/SuperCollider"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/share/SuperCollider/Extensions"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/DEBIAN"))
else:
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/etc"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/share"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/share/SuperCollider"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/share/emacs"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/share/doc"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/share/doc/SuperCollider"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/lib"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/lib/SuperCollider"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/lib/pkgconfig"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/bin"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/include"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/include/SuperCollider"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/usr/share/SuperCollider/Extensions"))
    os.mkdir(os.path.join(ROOT_PATH,"supercollider3/DEBIAN"))

#--------------------------------------------------------- 
# copy all files
#--------------------------------------------------------- 

# binaries
for n in range(0,len(SC_BINARIES)):
    shutil.copy(SC_BINARIES[n],os.path.join(ROOT_PATH,"supercollider3/usr/bin"))
# plugins
shutil.copytree(SC_PLUGINS,os.path.join(ROOT_PATH,"supercollider3/usr/lib/SuperCollider/plugins"))
# shared libs
for n in range(0,len(SC_LIBRARIES)):
    shutil.copy(SC_LIBRARIES[n],os.path.join(ROOT_PATH,"supercollider3/usr/lib"))
# pkg_config files
for n in range(0,len(SC_PKGCONFIG_FILES)):
    shutil.copy(SC_PKGCONFIG_FILES[n],os.path.join(ROOT_PATH,"supercollider3/usr/lib/pkgconfig"))
# help
shutil.copytree(SC_HELP_DIR,os.path.join(ROOT_PATH,"supercollider3/usr/share/SuperCollider/Help"))
# class library
shutil.copytree(SC_CLASS_LIBRARY,os.path.join(ROOT_PATH,"supercollider3/usr/share/SuperCollider/SCClassLibrary"))
# scel el 
shutil.copytree(SC_SCEL_EL,os.path.join(ROOT_PATH,"supercollider3/usr/share/emacs/site-lisp"))
# scel sc
shutil.copytree(SC_SCEL_SC,os.path.join(ROOT_PATH,"supercollider3/usr/share/SuperCollider/Extensions/scel"))
# doc
shutil.copytree(SC_DOC,os.path.join(ROOT_PATH,"supercollider3/usr/share/doc/SuperCollider/examples"))
# development files (includes)
for n in range(0,len(SC_DEV)):
    item = os.path.split(SC_DEV[n])
    shutil.copytree(
        SC_DEV[n],
        os.path.join(
            ROOT_PATH,
            "supercollider3/usr/include/SuperCollider/" + item[1]))
# configuration files
for n in range(0,len(SC_CONF)):
    shutil.copy(SC_CONF[n],os.path.join(ROOT_PATH,"supercollider3/etc"))
#just for debugging
shutil.copy(SC_DIR+"/debian/control",ROOT_PATH+"/supercollider3/DEBIAN")


#-------------------------------------------------------------------
# .deb package setup
#-------------------------------------------------------------------

DEBPKG = '#%s_%s-%s_%s.deb' % (DEBNAME, DEBVERSION, SVN_VERSION, DEBARCH)

env.Alias("debian",DEBPKG)

DEBCONTROLFILE = os.path.join(ROOT_PATH, "supercollider3/DEBIAN/control")

DEBFILES = []
# removing .svn dirs before creating archive and append every file path 
# to this array so we can keep track of how big the archive is going to be

for root, dirs, files in os.walk(ROOT_PATH):
    for n in range(0,len(files)):
        item = root+"/"+files[n]
        DEBFILES.append(item)
    if '.svn' in dirs: 
        shutil.rmtree(root+"/.svn")

print "Building the Debian package"
# And we can generate the .deb file by calling dpkg-deb
env.Command(DEBPKG, DEBCONTROLFILE,"dpkg-deb -b "+ROOT_PATH+"/supercollider3")
