%token	NAME INTEGER SC_FLOAT ACCIDENTAL SYMBOL STRING ASCII PRIMITIVENAME CLASSNAME CURRYARG
%token  VAR ARG CLASSVAR SC_CONST
%token	NILOBJ TRUEOBJ FALSEOBJ
%token	PSEUDOVAR
%token  ELLIPSIS DOTDOT PIE BEGINCLOSEDFUNC
%token  BADTOKEN INTERPRET
%token  BEGINGENERATOR LEFTARROW WHILE
%left	':'
%right  '='
%left	BINOP KEYBINOP '-' '<' '>' '*' '+' '|' READWRITEVAR
%left	'.'
%right  '`'
%right  UMINUS
%start  root

%{

#include <stdlib.h>
#include <string.h>
#include "PyrLexer.h"
#include "PyrParseNode.h"
#include "SC_Constants.h"
#include "SC_InlineUnaryOp.h"
#include "SC_InlineBinaryOp.h"
#include "InitAlloc.h"
#include "PredefinedSymbols.h"
#include "SimpleStack.h"

void bcopy(void *src, void *dst, size_t size) ;
int yyparse();
extern bool compilingCmdLine;
extern LongStack generatorStack;


%}
%error-verbose
%%

root	: classes
			{ gRootParseNode = (PyrParseNode*)$1; gParserResult = 1; }
		| classextensions
			{ gRootParseNode = (PyrParseNode*)$1; gParserResult = 1; }
		| INTERPRET cmdlinecode
			{ gRootParseNode = (PyrParseNode*)$2; gParserResult = 2; }
		;

classes : { $$ = 0; }
		|	classes classdef
			{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$2); }
		;

classextensions : classextension
				| classextensions classextension
				{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$2); }
				;

classdef	: classname superclass '{' classvardecls methods '}'
				{ $$ = (zz_ptr)newPyrClassNode((PyrSlotNode*)$1, (PyrSlotNode*)$2,
					(PyrVarListNode*)$4, (PyrMethodNode*)$5, 0);
				}
			| classname '[' optname ']' superclass '{' classvardecls methods '}'
				{ $$ = (zz_ptr)newPyrClassNode((PyrSlotNode*)$1, (PyrSlotNode*)$5,
					(PyrVarListNode*)$7, (PyrMethodNode*)$8,
					(PyrSlotNode*)$3);
				}
			;

classextension : '+' classname '{' methods '}'
				{
					$$ = (zz_ptr)newPyrClassExtNode((PyrSlotNode*)$2, (PyrMethodNode*)$4);
				}
			;

optname		: { $$ = 0; }
			| name
			;

superclass	: { $$ = 0; }
			| ':' classname
				{ $$ = $2; }
			;

classvardecls	: { $$ = 0; }
				| classvardecls classvardecl
					{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$2); }
				;

classvardecl	: CLASSVAR rwslotdeflist ';'
					{ $$ = (zz_ptr)newPyrVarListNode((PyrVarDefNode*)$2, varClass); }
				| VAR rwslotdeflist ';'
					{ $$ = (zz_ptr)newPyrVarListNode((PyrVarDefNode*)$2, varInst); }
				| SC_CONST constdeflist ';'
					{ $$ = (zz_ptr)newPyrVarListNode((PyrVarDefNode*)$2, varConst); }
				;

methods		: { $$ = 0; }
			| methods methoddef
				{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$2); }
			;

methoddef	: name '{' argdecls funcvardecls primitive methbody '}'
				{ $$ = (zz_ptr)newPyrMethodNode((PyrSlotNode*)$1, (PyrSlotNode*)$5,
					(PyrArgListNode*)$3, (PyrVarListNode*)$4, (PyrParseNode*)$6, 0); }
			| '*' name '{' argdecls funcvardecls primitive methbody '}'
				{ $$ = (zz_ptr)newPyrMethodNode((PyrSlotNode*)$2, (PyrSlotNode*)$6,
					(PyrArgListNode*)$4, (PyrVarListNode*)$5, (PyrParseNode*)$7, 1); }
			| binop '{' argdecls funcvardecls primitive methbody '}'
				{ $$ = (zz_ptr)newPyrMethodNode((PyrSlotNode*)$1, (PyrSlotNode*)$5,
					(PyrArgListNode*)$3, (PyrVarListNode*)$4, (PyrParseNode*)$6, 0); }
			| '*' binop '{' argdecls funcvardecls primitive methbody '}'
				{ $$ = (zz_ptr)newPyrMethodNode((PyrSlotNode*)$2, (PyrSlotNode*)$6,
					(PyrArgListNode*)$4, (PyrVarListNode*)$5, (PyrParseNode*)$7, 1); }
			;

optsemi		:
			| ';'
			;

optcomma	:
			| ','
			;

optequal	:
			| '='
			;

funcbody	: funretval
			| exprseq funretval
				{ $$ = (zz_ptr)newPyrDropNode((PyrParseNode*)$1, (PyrParseNode*)$2); }
			;

cmdlinecode	: '(' funcvardecls1 funcbody ')'
				{ $$ = (zz_ptr)newPyrBlockNode(NULL, (PyrVarListNode*)$2, (PyrParseNode*)$3, false); }
			| funcvardecls1 funcbody
				{ $$ = (zz_ptr)newPyrBlockNode(NULL, (PyrVarListNode*)$1, (PyrParseNode*)$2, false); }
			| funcbody
				{ $$ = (zz_ptr)newPyrBlockNode(NULL, NULL, (PyrParseNode*)$1, false); }
			;

methbody	: retval
			| exprseq retval
				{ $$ = (zz_ptr)newPyrDropNode((PyrParseNode*)$1, (PyrParseNode*)$2); }
			;

primitive	: { $$ = 0; }
			| primname optsemi
				{ $$ = $1; }
			;

retval	:
			{ $$ = (zz_ptr)newPyrReturnNode(NULL); }
		| '^' expr optsemi
			{ $$ = (zz_ptr)newPyrReturnNode((PyrParseNode*)$2); }
		;

funretval	:
			{ $$ = (zz_ptr)newPyrBlockReturnNode(); }
		| '^' expr optsemi
			{ $$ = (zz_ptr)newPyrReturnNode((PyrParseNode*)$2); }
		;

blocklist1	: blocklistitem
		| blocklist1 blocklistitem
				{
					$$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$2);
				}
			;

blocklistitem : blockliteral
				| generator
				;

blocklist	:	{ $$ = 0; }
			| blocklist1
			;

msgsend : name blocklist1
			{
				$$ = (zz_ptr)newPyrCallNode((PyrSlotNode*)$1, (PyrParseNode*)$2, 0, 0);
			}
		| '(' binop2 ')' blocklist1
			{
				$$ = (zz_ptr)newPyrCallNode((PyrSlotNode*)$2, (PyrParseNode*)$4, 0, 0);
			}
		| name '(' ')' blocklist1
			{
				$$ = (zz_ptr)newPyrCallNode((PyrSlotNode*)$1, NULL, NULL, (PyrParseNode*)$4);
			}
		| name '(' arglist1 optkeyarglist ')' blocklist
			{
				$$ = (zz_ptr)newPyrCallNode((PyrSlotNode*)$1, (PyrParseNode*)$3,
						(PyrParseNode*)$4, (PyrParseNode*)$6);
			}
		| '(' binop2 ')' '(' ')' blocklist1
			{
				$$ = (zz_ptr)newPyrCallNode((PyrSlotNode*)$2, NULL, NULL, (PyrParseNode*)$6);
			}
		| '(' binop2 ')' '(' arglist1 optkeyarglist ')' blocklist
			{
				$$ = (zz_ptr)newPyrCallNode((PyrSlotNode*)$2, (PyrParseNode*)$5,
						(PyrParseNode*)$6, (PyrParseNode*)$8);
			}
		| name '(' arglistv1 optkeyarglist ')'
			{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;

				if (isSuperObjNode((PyrParseNode*)$3)) {
					SetRaw(&((PyrPushNameNode*)$3)->mSlot, s_this);
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)$3,
					newPyrPushLitNode((PyrSlotNode*)$1, NULL));
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, (PyrParseNode*)$4, 0);
			}
		| '(' binop2 ')' '(' arglistv1 optkeyarglist ')'
			{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;

				SetSymbol(&slot, s_performList);
				selectornode = newPyrSlotNode(&slot);
				args = linkAfterHead(
					(PyrParseNode*)$5,
					newPyrPushLitNode((PyrSlotNode*)$2, NULL));
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, (PyrParseNode*)$6, 0);
			}
		| classname '[' arrayelems ']'
			{ $$ = (zz_ptr)newPyrDynListNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
		| classname blocklist1
			{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;

				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)$1);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, (PyrParseNode*)$2);
			}
		| classname '(' ')' blocklist
			{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;

				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)$1);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, NULL, (PyrParseNode*)$4);
			}
		| classname '(' keyarglist1 optcomma ')' blocklist
			{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;

				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = (PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)$1);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, (PyrParseNode*)$3, (PyrParseNode*)$6);
			}
		| classname '(' arglist1 optkeyarglist ')' blocklist
			{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;

				SetSymbol(&slot, s_new);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)$1),
					(PyrParseNode*)$3);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, (PyrParseNode*)$4, (PyrParseNode*)$6);
			}
		| classname '(' arglistv1 optkeyarglist ')'
			{
				PyrSlotNode *selectornode, *selectornode2;
				PyrSlot slot, slot2;
				PyrParseNode* args;

				if (isSuperObjNode((PyrParseNode*)$1)) {
					SetRaw(&((PyrPushNameNode*)$1)->mSlot, s_this);
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_new);
				selectornode = newPyrSlotNode(&slot);
				selectornode2 = newPyrSlotNode(&slot2);
				args = linkNextNode(
					(PyrParseNode*)newPyrPushNameNode((PyrSlotNode*)$1),
					newPyrPushLitNode(selectornode2, NULL));
				args = linkNextNode(args, (PyrParseNode*)$3);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, (PyrParseNode*)$5, 0);
			}
		| expr '.' '(' ')' blocklist
			{
				PyrSlotNode *selectornode;
				PyrSlot slot;

				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				$$ = (zz_ptr)newPyrCallNode(selectornode, (PyrParseNode*)$1, NULL, (PyrParseNode*)$5);
			}
		| expr '.' '(' keyarglist1 optcomma ')' blocklist
			{
				PyrSlotNode *selectornode;
				PyrSlot slot;

				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				$$ = (zz_ptr)newPyrCallNode(selectornode, (PyrParseNode*)$1, (PyrParseNode*)$4, (PyrParseNode*)$7);
			}
		| expr '.' name '(' keyarglist1 optcomma ')' blocklist
			{
				$$ = (zz_ptr)newPyrCallNode((PyrSlotNode*)$3, (PyrParseNode*)$1,
					(PyrParseNode*)$5, (PyrParseNode*)$8);
			}
		| expr '.' '(' arglist1 optkeyarglist ')' blocklist
			{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;

				SetSymbol(&slot, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)$1,
					(PyrParseNode*)$4);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, (PyrParseNode*)$5, (PyrParseNode*)$7);
			}
		| expr '.' '(' arglistv1 optkeyarglist ')'
			{
				PyrSlotNode *selectornode;
				PyrSlot slot, slot2;
				PyrParseNode* args;

				if (isSuperObjNode((PyrParseNode*)$1)) {
					SetRaw(&((PyrPushNameNode*)$1)->mSlot, s_this);
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				SetSymbol(&slot2, s_value);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)$1,
					newPyrPushLitNode(newPyrSlotNode(&slot2), NULL));
				args = linkNextNode(args, (PyrParseNode*)$4);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, (PyrParseNode*)$5, 0);
			}
		| expr '.' name '(' ')' blocklist
			{
				$$ = (zz_ptr)newPyrCallNode((PyrSlotNode*)$3, (PyrParseNode*)$1, NULL, (PyrParseNode*)$6);
			}
		| expr '.' name '(' arglist1 optkeyarglist ')' blocklist
			{
				PyrParseNode* args;
				args = linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$5);
				$$ = (zz_ptr)newPyrCallNode((PyrSlotNode*)$3, args, (PyrParseNode*)$6, (PyrParseNode*)$8);
			}
		| expr '.' name '(' arglistv1 optkeyarglist ')'
			{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;

				if (isSuperObjNode((PyrParseNode*)$1)) {
					SetRaw(&((PyrPushNameNode*)$1)->mSlot, s_this);
					SetSymbol(&slot, s_superPerformList);
				} else {
					SetSymbol(&slot, s_performList);
				}
				selectornode = newPyrSlotNode(&slot);

				args = linkNextNode((PyrParseNode*)$1, newPyrPushLitNode((PyrSlotNode*)$3, NULL));
				args = linkNextNode(args, (PyrParseNode*)$5);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, (PyrParseNode*)$6, 0);
			}
		| expr '.' name blocklist
			{
				$$ = (zz_ptr)newPyrCallNode((PyrSlotNode*)$3, (PyrParseNode*)$1, 0, (PyrParseNode*)$4);
			}
		;

generator : '{' ':' exprseq { pushls(&generatorStack, $3); pushls(&generatorStack, 1); } ',' qual '}'
			{
				PyrSlot slot;
				SetSymbol(&slot, getsym("r"));
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);

				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)$6, false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				$$ = (zz_ptr)newPyrCallNode(selectornode, (PyrParseNode*)blocklit, 0, 0);
			}
		| '{' ';' exprseq { pushls(&generatorStack, $3); pushls(&generatorStack, 2); } ',' qual '}'
			{
				$$ = $6;
			}
		;

nextqual	:
				{
					// innermost part
					int action = popls(&generatorStack);
					PyrParseNode* expr = (PyrParseNode*)popls(&generatorStack);

					switch (action)
					{
						case 1 :
						{
							PyrSlot slot;
							SetSymbol(&slot, getsym("yield"));
							PyrSlotNode* selectornode = newPyrSlotNode(&slot);

							$$ = (zz_ptr)newPyrCallNode(selectornode, expr, 0, 0);
						} break;
						case 2 :
						{
							$$ = (zz_ptr)expr;
						} break;
					}
				}
			| ',' qual
				{ $$ = $2; }
			;

qual	: name LEFTARROW exprseq nextqual
			{
				// later should check if exprseq is a series and optimize it to for loop
				PyrParseNode *exprseq = (PyrParseNode*)$3;
				if (exprseq->mClassno == pn_CallNode) {
					PyrCallNode *callnode = (PyrCallNode*)exprseq;
					if (slotRawSymbol(&callnode->mSelector->mSlot) == s_series)
					{
						SetSymbol(&callnode->mSelector->mSlot, getsym("forSeries"));

						PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)$1, NULL, 0);
						PyrArgListNode* args = newPyrArgListNode(var, NULL);
						PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)$4, false);
						PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);

						callnode->mArglist = linkNextNode(callnode->mArglist, blocklit);
						$$ = (zz_ptr)callnode;

					} else goto notoptimized1;
				} else {
					notoptimized1:
					PyrSlot slot;
					SetSymbol(&slot, getsym("do"));
					PyrSlotNode* selectornode = newPyrSlotNode(&slot);

					PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)$1, NULL, 0);
					PyrArgListNode* args = newPyrArgListNode(var, NULL);
					PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)$4, false);
					PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);

					PyrParseNode* args2 = linkNextNode(exprseq, blocklit);
					$$ = (zz_ptr)newPyrCallNode(selectornode, args2, 0, 0);
				}
			}
		| name name LEFTARROW exprseq nextqual
			{
				// later should check if exprseq is a series and optimize it to for loop
				PyrParseNode *exprseq = (PyrParseNode*)$4;
				if (exprseq->mClassno == pn_CallNode) {
					PyrCallNode *callnode = (PyrCallNode*)exprseq;
					if (slotRawSymbol(&callnode->mSelector->mSlot) == s_series)
					{
						SetSymbol(&callnode->mSelector->mSlot, getsym("forSeries"));

						PyrVarDefNode* var1 = newPyrVarDefNode((PyrSlotNode*)$1, NULL, 0);
						PyrVarDefNode* var2 = newPyrVarDefNode((PyrSlotNode*)$2, NULL, 0);
						PyrVarDefNode* vars = (PyrVarDefNode*)linkNextNode(var1, var2);
						PyrArgListNode* args = newPyrArgListNode(vars, NULL);
						PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)$5, false);
						PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);

						callnode->mArglist = linkNextNode(callnode->mArglist, blocklit);
						$$ = (zz_ptr)callnode;

					} else goto notoptimized2;
				} else {
					notoptimized2:
					PyrSlot slot;
					SetSymbol(&slot, getsym("do"));
					PyrSlotNode* selectornode = newPyrSlotNode(&slot);

					PyrVarDefNode* var1 = newPyrVarDefNode((PyrSlotNode*)$1, NULL, 0);
					PyrVarDefNode* var2 = newPyrVarDefNode((PyrSlotNode*)$2, NULL, 0);
					PyrVarDefNode* vars = (PyrVarDefNode*)linkNextNode(var1, var2);
					PyrArgListNode* args = newPyrArgListNode(vars, NULL);
					PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)$5, false);
					PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);

					PyrParseNode* args2 = linkNextNode(exprseq, blocklit);
					$$ = (zz_ptr)newPyrCallNode(selectornode, args2, 0, 0);
				}
			}
		| VAR name '=' exprseq nextqual
			{
				PyrSlot slot;
				SetSymbol(&slot, s_value);
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);

				PyrVarDefNode* var = newPyrVarDefNode((PyrSlotNode*)$2, NULL, 0);
				PyrArgListNode* args = newPyrArgListNode(var, NULL);
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(args, 0, (PyrParseNode*)$5, false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode(blocklit, (PyrParseNode*)$4);

				$$ = (zz_ptr)newPyrCallNode(selectornode, args2, 0, 0);
			}
		| exprseq nextqual
			{
				PyrSlot slot;
				SetSymbol(&slot, getsym("if"));
				PyrSlotNode* selectornode = newPyrSlotNode(&slot);
				PyrParseNode *block = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)$2, false);
				PyrParseNode *blocklit = (PyrParseNode*)newPyrPushLitNode(NULL, block);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode((PyrParseNode*)$1, blocklit);

				$$ = (zz_ptr)newPyrCallNode(selectornode, args2, 0, 0);
			}
		| ':' ':' exprseq nextqual
			{
				$$ = (zz_ptr)newPyrDropNode((PyrParseNode*)$3, (PyrParseNode*)$4);
			}
		| ':' WHILE exprseq nextqual
			{
				PyrSlot slot;
				SetSymbol(&slot, getsym("alwaysYield"));
				PyrSlotNode* selectornode1 = newPyrSlotNode(&slot);

				SetSymbol(&slot, getsym("if"));
				PyrSlotNode* selectornode2 = newPyrSlotNode(&slot);

				SetNil(&slot);
				PyrParseNode *pushnil = (PyrParseNode*)newPyrPushLitNode(newPyrSlotNode(&slot), NULL);

				PyrParseNode *yieldNil = (PyrParseNode*)newPyrCallNode(selectornode1, pushnil, 0, 0);

				PyrParseNode *block1 = (PyrParseNode*)newPyrBlockNode(0, 0, yieldNil, false);
				PyrParseNode *blocklit1 = (PyrParseNode*)newPyrPushLitNode(NULL, block1);
				PyrParseNode *block2 = (PyrParseNode*)newPyrBlockNode(0, 0, (PyrParseNode*)$4, false);
				PyrParseNode *blocklit2 = (PyrParseNode*)newPyrPushLitNode(NULL, block2);
				PyrParseNode* args2 = (PyrParseNode*)linkNextNode((PyrParseNode*)$3, blocklit2);
				PyrParseNode* args3 = (PyrParseNode*)linkNextNode(args2, blocklit1);

				$$ = (zz_ptr)newPyrCallNode(selectornode2, args3, 0, 0);
			}
		;

expr1	: pushliteral
		| blockliteral
		| generator
		| pushname
		| curryarg
		| msgsend
		| '(' exprseq ')'
			{
				PyrParseNode* node = (PyrParseNode*)$2;
				node->mParens = 1;
				$$ = $2;
			}
		| '~' name
			{
				PyrParseNode* argnode;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)$2, NULL);
				SetSymbol(&slot, s_envirGet);
				selectornode = newPyrSlotNode(&slot);
				$$ = (zz_ptr)newPyrCallNode(selectornode, argnode, 0, 0);
			}
		|  '[' arrayelems ']'
			{ $$ = (zz_ptr)newPyrDynListNode(0, (PyrParseNode*)$2); }
		|	'(' valrange2 ')'
			{ $$ = $2; }
		|	'(' ':' valrange3 ')'
			{ $$ = $3; }
		|	'(' dictslotlist ')'
			{ $$ = (zz_ptr)newPyrDynDictNode((PyrParseNode*)$2); }
		| pseudovar
			{ $$ = (zz_ptr)newPyrPushNameNode((PyrSlotNode*)$1); }
		| expr1 '[' arglist1 ']'
			{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;

				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)$1,
					(PyrParseNode*)$3);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		| valrangex1
		;

valrangex1	: expr1 '[' arglist1 DOTDOT ']'
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)$3);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)$3);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);

				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		| expr1 '[' DOTDOT exprseq ']'
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);

				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)$4);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		| expr1 '[' arglist1 DOTDOT exprseq ']'
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)$3);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)$3);
					compileErrors++;
				}

				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)$5);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		;

valrangeassign : expr1 '[' arglist1 DOTDOT ']' '=' expr
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)$3);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)$3);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);

				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)$7);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		| expr1 '[' DOTDOT exprseq ']' '=' expr
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);

				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)$4);
				args = linkNextNode(args, (PyrParseNode*)$7);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		| expr1 '[' arglist1 DOTDOT exprseq ']' '=' expr
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)$3);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)$3);
					compileErrors++;
				}

				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)$5);
				args = linkNextNode(args, (PyrParseNode*)$8);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
	;

valrangexd	: expr '.' '[' arglist1 DOTDOT ']'
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)$4);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)$3);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);

				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$4);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		| expr '.' '[' DOTDOT exprseq ']'
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);

				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)$5);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		| expr '.' '[' arglist1 DOTDOT exprseq ']'
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)$4);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)$3);
					compileErrors++;
				}

				SetSymbol(&selectorSlot, s_copyseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$4);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)$6);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		| expr '.' '[' arglist1 DOTDOT ']' '=' expr
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)$4);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)$3);
					compileErrors++;
				}

				SetNil(&nilSlot);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);

				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$4);
				if (arglen < 2) {
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)$8);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		| expr '.' '[' DOTDOT exprseq ']' '=' expr
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);

				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, nilnode1);
				args = linkNextNode(args, nilnode2);
				args = linkNextNode(args, (PyrParseNode*)$5);
				args = linkNextNode(args, (PyrParseNode*)$8);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		| expr '.' '[' arglist1 DOTDOT exprseq ']' '=' expr
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode1;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				int arglen = nodeListLength((PyrParseNode*)$4);
				if (arglen > 2) {
					error("ArrayedCollection subrange has too many arguments.\n");
					nodePostErrorLine((PyrParseNode*)$3);
					compileErrors++;
				}

				SetSymbol(&selectorSlot, s_putseries);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$4);
				if (arglen < 2) {
					SetNil(&nilSlot);
					nilnode1 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
					args = linkNextNode(args, nilnode1);
				}
				args = linkNextNode(args, (PyrParseNode*)$6);
				args = linkNextNode(args, (PyrParseNode*)$9);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
	;

valrange2	: exprseq DOTDOT
			{
				// if this is not used in a 'do' or list comprehension, then should return an error.
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);

				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, nilnode);
				args = linkNextNode(args, nilnode2);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}

		| DOTDOT exprseq
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);

				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)$2);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}

		| exprseq DOTDOT exprseq
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);

				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, nilnode);
				args = linkNextNode(args, (PyrParseNode*)$3);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}

		| exprseq ',' exprseq DOTDOT exprseq
			{
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;

				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)$1,
					(PyrParseNode*)$3);
				args = linkNextNode(args, (PyrParseNode*)$5);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		| exprseq ',' exprseq DOTDOT
			{
				// if this is not used in a 'do' or list comprehension, then should return an error.
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;
				PyrPushLitNode *nilnode;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);

				SetSymbol(&selectorSlot, s_series);
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)$1,
					(PyrParseNode*)$3);
				args = linkNextNode(args, nilnode);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
	;

valrange3	: DOTDOT exprseq
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *zeronode;
				PyrSlot selectorSlot, nilSlot, zeroSlot;
				PyrParseNode* args;

				SetInt(&zeroSlot, 0);
				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				zeronode = newPyrPushLitNode(newPyrSlotNode(&zeroSlot), NULL);

				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(zeronode, nilnode);
				args = linkNextNode(args, (PyrParseNode*)$2);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}

		| exprseq DOTDOT
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode, *nilnode2;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);
				nilnode2 = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);

				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, nilnode);
				args = linkNextNode(args, nilnode2);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}

		| exprseq DOTDOT exprseq
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);

				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, nilnode);
				args = linkNextNode(args, (PyrParseNode*)$3);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}

		| exprseq ',' exprseq DOTDOT
			{
				PyrSlotNode *selectornode;
				PyrPushLitNode *nilnode;
				PyrSlot selectorSlot, nilSlot;
				PyrParseNode* args;

				SetNil(&nilSlot);
				nilnode = newPyrPushLitNode(newPyrSlotNode(&nilSlot), NULL);

				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3);
				args = linkNextNode(args, nilnode);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		| exprseq ',' exprseq DOTDOT exprseq
			{
				PyrSlotNode *selectornode;
				PyrSlot selectorSlot;
				PyrParseNode* args;

				SetSymbol(&selectorSlot, getsym("seriesIter"));
				selectornode = newPyrSlotNode(&selectorSlot);
				args = linkNextNode(
					(PyrParseNode*)$1,
					(PyrParseNode*)$3);
				args = linkNextNode(args, (PyrParseNode*)$5);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
	;

expr	: expr1
		| valrangexd
		| valrangeassign
		| classname { $$ = (zz_ptr)newPyrPushNameNode((PyrSlotNode*)$1); }
		| expr '.' '[' arglist1 ']'
			{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;

				SetSymbol(&slot, s_at);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)$1,
					(PyrParseNode*)$4);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		| '`' expr
			{
				PyrParseNode *node, *args;
				PyrSlotNode *slotnode;
				PyrSlot slot;

				SetSymbol(&slot, s_ref);
				slotnode = newPyrSlotNode(&slot);
				node = (PyrParseNode*)newPyrPushNameNode(slotnode);
				args = linkNextNode(node, (PyrParseNode*)$2);
				SetSymbol(&slot, s_new);
				slotnode = newPyrSlotNode(&slot);
				$$ = (zz_ptr)newPyrCallNode(slotnode, args, 0, 0);
			}
		| expr binop2 adverb expr %prec BINOP
			{
				$$ = (zz_ptr)newPyrBinopCallNode((PyrSlotNode*)$2,
						(PyrParseNode*)$1, (PyrParseNode*)$4, (PyrParseNode*)$3);
			}
		| name '=' expr
			{
				$$ = (zz_ptr)newPyrAssignNode((PyrSlotNode*)$1, (PyrParseNode*)$3, 0);
			}
		| '~' name '=' expr
			{
				PyrParseNode *argnode, *args;
				PyrSlotNode* selectornode;
				PyrSlot slot;
				argnode = (PyrParseNode*)newPyrPushLitNode((PyrSlotNode*)$2, NULL);
				args = linkNextNode(argnode, (PyrParseNode*)$4);
				SetSymbol(&slot, s_envirPut);
				selectornode = newPyrSlotNode(&slot);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		| expr '.' name '=' expr
			{
				$$ = (zz_ptr)newPyrSetterNode((PyrSlotNode*)$3,
						(PyrParseNode*)$1, (PyrParseNode*)$5);
			}
		| name '(' arglist1 optkeyarglist ')' '=' expr
			{
				if ($4 != 0) {
					error("Setter method called with keyword arguments.\n");
					nodePostErrorLine((PyrParseNode*)$4);
					compileErrors++;
				}
				$$ = (zz_ptr)newPyrSetterNode((PyrSlotNode*)$1,
						(PyrParseNode*)$3, (PyrParseNode*)$7);
			}
		| '#' mavars '=' expr
			{
				$$ = (zz_ptr)newPyrMultiAssignNode((PyrMultiAssignVarListNode*)$2,
					(PyrParseNode*)$4, 0);
			}
		| expr1 '[' arglist1 ']' '=' expr
			{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;

				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)$1,
					(PyrParseNode*)$3);
				args = linkNextNode( args, (PyrParseNode*)$6);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		| expr '.' '[' arglist1 ']' '=' expr
			{
				PyrSlotNode *selectornode;
				PyrSlot slot;
				PyrParseNode* args;

				SetSymbol(&slot, s_put);
				selectornode = newPyrSlotNode(&slot);
				args = linkNextNode(
					(PyrParseNode*)$1,
					(PyrParseNode*)$4);
				args = linkNextNode( args, (PyrParseNode*)$7);
				$$ = (zz_ptr)newPyrCallNode(selectornode, args, 0, 0);
			}
		;

adverb  : { $$ = 0; }
		| '.' name { $$ = (zz_ptr)newPyrPushLitNode((PyrSlotNode*)$2, NULL); }
		| '.' integer { $$ = (zz_ptr)newPyrPushLitNode((PyrSlotNode*)$2, NULL); }
		| '.' '(' exprseq ')' { $$ = $3; }
		;

exprn	: expr
		| exprn ';' expr
			{
				$$ = (zz_ptr)newPyrDropNode((PyrParseNode*)$1, (PyrParseNode*)$3);
			}
		;

exprseq : exprn optsemi
		;

arrayelems	: { $$ = 0; }
			| arrayelems1 optcomma
			  { $$ = $1; }
			;

arrayelems1	: exprseq
			| exprseq ':' exprseq
				{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
			| keybinop exprseq
				{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)$1, NULL);
					$$ = (zz_ptr)linkNextNode(key, (PyrParseNode*)$2);
				}
			| arrayelems1 ',' exprseq
					{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
			| arrayelems1 ',' keybinop exprseq
				{
					PyrParseNode* elems;
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)$3, NULL);
					elems = (PyrParseNode*)linkNextNode(key, (PyrParseNode*)$4);
					$$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, elems);
				}
			| arrayelems1 ',' exprseq ':' exprseq
				{
					PyrParseNode* elems;
					elems = (PyrParseNode*)linkNextNode((PyrParseNode*)$3, (PyrParseNode*)$5);
					$$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, elems);
				}
			;

arglist1	: exprseq
			| arglist1 ',' exprseq
					{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
			;

arglistv1	: '*' exprseq
				{ $$ = $2; }
			| arglist1 ',' '*' exprseq
					{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$4); }
			;

keyarglist1	: keyarg
			| keyarglist1 ',' keyarg
					{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
			;

keyarg	: keybinop exprseq
				{ $$ = (zz_ptr)newPyrPushKeyArgNode((PyrSlotNode*)$1, (PyrParseNode*)$2); }
		;

optkeyarglist	: optcomma { $$ = 0; }
				| ',' keyarglist1 optcomma { $$ = $2; }
				;

mavars	: mavarlist
			{ $$ = (zz_ptr)newPyrMultiAssignVarListNode((PyrSlotNode*)$1, NULL); }
		| mavarlist ELLIPSIS name
			{ $$ = (zz_ptr)newPyrMultiAssignVarListNode((PyrSlotNode*)$1, (PyrSlotNode*)$3); }
		;

mavarlist	: name
			| mavarlist ',' name
					{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
			;

slotliteral
		: integer	{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
		| floatp	{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
		| ascii		{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
		| string	{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
		| symbol	{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
		| trueobj	{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
		| falseobj	{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
		| nilobj	{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
		| listlit	{ $$ = (zz_ptr)newPyrLiteralNode(NULL, (PyrParseNode*)$1); }
		;

blockliteral : block	{ $$ = (zz_ptr)newPyrPushLitNode(NULL, (PyrParseNode*)$1); }
			;

pushname	: name		{ $$ = (zz_ptr)newPyrPushNameNode((PyrSlotNode*)$1); }
			;

pushliteral	: integer	{ $$ = (zz_ptr)newPyrPushLitNode((PyrSlotNode*)$1, NULL); }
			| floatp	{ $$ = (zz_ptr)newPyrPushLitNode((PyrSlotNode*)$1, NULL); }
			| ascii		{ $$ = (zz_ptr)newPyrPushLitNode((PyrSlotNode*)$1, NULL); }
			| string	{ $$ = (zz_ptr)newPyrPushLitNode((PyrSlotNode*)$1, NULL); }
			| symbol	{ $$ = (zz_ptr)newPyrPushLitNode((PyrSlotNode*)$1, NULL); }
			| trueobj	{ $$ = (zz_ptr)newPyrPushLitNode((PyrSlotNode*)$1, NULL); }
			| falseobj	{ $$ = (zz_ptr)newPyrPushLitNode((PyrSlotNode*)$1, NULL); }
			| nilobj	{ $$ = (zz_ptr)newPyrPushLitNode((PyrSlotNode*)$1, NULL); }
			| listlit	{ $$ = (zz_ptr)newPyrPushLitNode(NULL, (PyrParseNode*)$1); }
			;

listliteral	: integer	{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
			| floatp	{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
			| ascii		{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
			| string	{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
			| symbol	{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
			| name		{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
			| trueobj	{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
			| falseobj	{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
			| nilobj	{ $$ = (zz_ptr)newPyrLiteralNode((PyrSlotNode*)$1, NULL); }
			| listlit2	{ $$ = (zz_ptr)newPyrLiteralNode(NULL, (PyrParseNode*)$1); }
			| dictlit2  { $$ = (zz_ptr)newPyrLiteralNode(NULL, (PyrParseNode*)$1); }
			;

block	: '{' argdecls funcvardecls funcbody '}'
				{ $$ = (zz_ptr)newPyrBlockNode((PyrArgListNode*)$2, (PyrVarListNode*)$3,
					(PyrParseNode*)$4, false); }
		| BEGINCLOSEDFUNC argdecls funcvardecls funcbody '}'
				{ $$ = (zz_ptr)newPyrBlockNode((PyrArgListNode*)$2, (PyrVarListNode*)$3,
					(PyrParseNode*)$4, true); }
		;

funcvardecls	: { $$ = 0; }
				| funcvardecls funcvardecl
					{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$2); }
				;

funcvardecls1	: funcvardecl
				| funcvardecls1 funcvardecl
					{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$2); }
				;

funcvardecl	: VAR vardeflist ';'
				{ $$ = (zz_ptr)newPyrVarListNode((PyrVarDefNode*)$2, varLocal); }
			;

argdecls	: { $$ = 0; }
			| ARG vardeflist ';'
				{
					$$ = (zz_ptr)newPyrArgListNode((PyrVarDefNode*)$2, NULL);
				}
			| ARG vardeflist0 ELLIPSIS name ';'
				{
					$$ = (zz_ptr)newPyrArgListNode((PyrVarDefNode*)$2, (PyrSlotNode*)$4);
				}
			| '|' slotdeflist '|'
				{
					$$ = (zz_ptr)newPyrArgListNode((PyrVarDefNode*)$2, NULL);
				}
			| '|' slotdeflist0 ELLIPSIS name '|'
				{
					$$ = (zz_ptr)newPyrArgListNode((PyrVarDefNode*)$2, (PyrSlotNode*)$4);
				}
			;

constdeflist	: constdef
				| constdeflist optcomma constdef
					{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
				;

constdef	: rspec name '=' slotliteral
				{ $$ = (zz_ptr)newPyrVarDefNode((PyrSlotNode*)$2, (PyrParseNode*)$4, $1); }
			;

slotdeflist0 	: { $$ = 0; }
				| slotdeflist
				;

slotdeflist	: slotdef
			| slotdeflist optcomma slotdef
				{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
			;

slotdef		: name
				{ $$ = (zz_ptr)newPyrVarDefNode((PyrSlotNode*)$1, NULL, 0); }
			| name optequal slotliteral
				{ $$ = (zz_ptr)newPyrVarDefNode((PyrSlotNode*)$1, (PyrParseNode*)$3, 0); }
			| name optequal '(' exprseq ')'
				{
					PyrParseNode* node = (PyrParseNode*)$4;
					node->mParens = 1;
					$$ = (zz_ptr)newPyrVarDefNode((PyrSlotNode*)$1, node, 0);
				}
			;

vardeflist0 	: { $$ = 0; }
				| vardeflist
				;

vardeflist      : vardef
                        | vardeflist ',' vardef
                                { $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
                        ;

vardef          : name
                                { $$ = (zz_ptr)newPyrVarDefNode((PyrSlotNode*)$1, NULL, 0); }
                        | name '=' expr
                                { $$ = (zz_ptr)newPyrVarDefNode((PyrSlotNode*)$1, (PyrParseNode*)$3, 0); }
                        | name '(' exprseq ')'
                                {
									PyrParseNode* node = (PyrParseNode*)$3;
									node->mParens = 1;
									$$ = (zz_ptr)newPyrVarDefNode((PyrSlotNode*)$1, node, 0);
								}
                        ;

dictslotdef	: exprseq ':' exprseq
				{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
			| keybinop exprseq
				{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)$1, NULL);
					$$ = (zz_ptr)linkNextNode(key, (PyrParseNode*)$2);
				}
			;

dictslotlist1	: dictslotdef
				| dictslotlist1 ',' dictslotdef
					{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
				;

dictslotlist	: { $$ = 0; }
				| dictslotlist1 optcomma
				;

rwslotdeflist	: rwslotdef
				| rwslotdeflist ',' rwslotdef
					{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
				;

rwslotdef		: rwspec name
					{ $$ = (zz_ptr)newPyrVarDefNode((PyrSlotNode*)$2, NULL, $1); }
				| rwspec name '=' slotliteral
					{ $$ = (zz_ptr)newPyrVarDefNode((PyrSlotNode*)$2, (PyrParseNode*)$4, $1); }
				;

dictlit2	: '(' litdictslotlist ')'
				{ $$ = (zz_ptr)newPyrLitDictNode((PyrParseNode*)$2); }
			;

litdictslotdef	: listliteral ':' listliteral
				{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
			| keybinop listliteral
				{
					PyrParseNode* key = newPyrPushLitNode((PyrSlotNode*)$1, NULL);
					$$ = (zz_ptr)linkNextNode(key, (PyrParseNode*)$2);
				}
			;

litdictslotlist1	: litdictslotdef
				| litdictslotlist1 ',' litdictslotdef
					{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
				;

litdictslotlist	: { $$ = 0; }
				| litdictslotlist1 optcomma
				;



listlit	: '#' '[' literallistc ']'
				{ $$ = (zz_ptr)newPyrLitListNode(0, (PyrParseNode*)$3); }
		| '#' classname  '[' literallistc ']'
				{ $$ = (zz_ptr)newPyrLitListNode((PyrParseNode*)$2, (PyrParseNode*)$4); }
		;

listlit2	: '[' literallistc ']'
				{ $$ = (zz_ptr)newPyrLitListNode(0, (PyrParseNode*)$2); }
			| classname  '[' literallistc ']'
				{ $$ = (zz_ptr)newPyrLitListNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
			;

literallistc	: { $$ = 0; }
				| literallist1 optcomma
				;

literallist1	: listliteral
				| literallist1 ',' listliteral
					{ $$ = (zz_ptr)linkNextNode((PyrParseNode*)$1, (PyrParseNode*)$3); }
				;

rwspec	:  { $$ = rwPrivate; }
		| '<'
			{ $$ = rwReadOnly; }
		| READWRITEVAR
			{ $$ = rwReadWrite; }
		| '>'
			{ $$ = rwWriteOnly; }
		;

rspec	:  { $$ = rwPrivate; }
		| '<'
			{ $$ = rwReadOnly; }
		;

integer	: INTEGER { $$ = zzval; }
		| '-'INTEGER %prec UMINUS
			{
				PyrSlotNode *node;
				node = (PyrSlotNode*)zzval;
				SetRaw(&node->mSlot, -slotRawInt(&node->mSlot));
				$$ = zzval;
			}
	;

floatr	: SC_FLOAT { $$ = zzval; }
		| '-' SC_FLOAT %prec UMINUS
			{
				PyrSlotNode *node;
				node = (PyrSlotNode*)zzval;
				SetRaw(&node->mSlot, -slotRawFloat(&node->mSlot));
				$$ = zzval;
			}
	;

accidental : ACCIDENTAL { $$ = zzval; }
			| '-' ACCIDENTAL %prec UMINUS
				{
					PyrSlotNode *node;
					double intval, fracval;
					node = (PyrSlotNode*)zzval;
					intval = floor(slotRawFloat(&node->mSlot) + 0.5);
					fracval = slotRawFloat(&node->mSlot) - intval;
					SetRaw(&node->mSlot, -intval + fracval);
					$$ = zzval;
				}

pie		: PIE { $$ = zzval; }
	;

floatp	: floatr
		| accidental
		| floatr pie
			{
				PyrSlotNode *node;
				node = (PyrSlotNode*)$1;
				SetRaw(&node->mSlot, slotRawFloat(&node->mSlot) * pi);
			}
		| integer pie
			{
				PyrSlotNode *node;
				double ival;
				node = (PyrSlotNode*)$1;
				ival = slotRawInt(&node->mSlot);
				SetFloat(&node->mSlot, ival * pi);
			}
		| pie
			{
				PyrSlotNode *node;
				node = (PyrSlotNode*)zzval;
				SetFloat(&node->mSlot, pi);
				$$ = zzval;
			}
		| '-' pie
			{
				PyrSlotNode *node;
				node = (PyrSlotNode*)zzval;
				SetFloat(&node->mSlot, -pi);
				$$ = zzval;
			}
	;

name		: NAME { $$ = zzval; }
			| WHILE { $$ = zzval; }
		;

classname		: CLASSNAME { $$ = zzval; }
		;

primname		: PRIMITIVENAME { $$ = zzval; }
		;

trueobj		: TRUEOBJ { $$ = zzval; }
		;

falseobj	: FALSEOBJ { $$ = zzval; }
		;

nilobj		: NILOBJ { $$ = zzval; }
		;

ascii		: ASCII { $$ = zzval; }
		;

symbol		: SYMBOL { $$ = zzval; }
		;

string		: STRING { $$ = zzval; }
		;

pseudovar	: PSEUDOVAR { $$ = zzval; }
		;

binop	: BINOP { $$ = zzval; }
		| READWRITEVAR { $$ = zzval; }
		| '<'  { $$ = zzval; }
		| '>'  { $$ = zzval; }
		| '-'  { $$ = zzval; }
		| '*'  { $$ = zzval; }
		| '+'  { $$ = zzval; }
		| '|'  { $$ = zzval; }
	;

keybinop : KEYBINOP { $$ = zzval; }
		;

binop2  : binop
		| keybinop
		;

curryarg : CURRYARG { $$ = zzval; }

